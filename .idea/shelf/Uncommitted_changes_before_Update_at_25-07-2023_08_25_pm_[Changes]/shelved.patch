Index: Classifier_Models/Classifier_model_builder_heart.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\r\nimport streamlit as st\r\nfrom sklearn.model_selection import train_test_split\r\nfrom sklearn.neighbors import KNeighborsClassifier\r\nfrom sklearn.naive_bayes import GaussianNB\r\nimport pandas as pd\r\nfrom sklearn.tree import DecisionTreeClassifier\r\nimport pickle\r\nfrom sklearn.metrics import confusion_matrix, accuracy_score\r\nimport matplotlib.pyplot as plt\r\nfrom sklearn.linear_model import LogisticRegression\r\nfrom sklearn.ensemble import RandomForestClassifier\r\nfrom sklearn.metrics import classification_report\r\n\r\nurl = \"https://raw.githubusercontent.com/ChakraDeep8/Hypertension_Stroke_DiseasePrediction/master/res/heart.csv\"\r\nheart = pd.read_csv(url)\r\n\r\n# Ordinal feature encoding\r\ndf = heart.copy()\r\nencode = ['Sex', 'ChestPainType', 'RestingECG', 'ExerciseAngina', 'ST_Slope']\r\n\r\nfor col in encode:\r\n    dummy = pd.get_dummies(df[col], prefix=col)\r\n    df = pd.concat([df, dummy], axis=1)\r\n    del df[col]\r\n    del dummy\r\n\r\n# Separating X and y\r\nX = df.drop('HeartDisease', axis=1)\r\nY = df['HeartDisease']\r\n\r\n# Split the dataset into training and testing sets\r\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)\r\n\r\n\"\"\"________Naive Bayes Algorithm________\"\"\"\r\n# Train the Naive Bayes classifier\r\nnb_classifier = GaussianNB(var_smoothing=1e-9)\r\nnb_classifier.fit(X_train, y_train)\r\n# Predict using the Naive Bayes classifier\r\nnb_predictions = nb_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Naive Bayes classifier\r\nnb_cm = confusion_matrix(y_test, nb_predictions)\r\nnb_accuracy = accuracy_score(y_test, nb_predictions)\r\nnb_classifier_report = classification_report(y_test, nb_predictions)\r\nnb_classifier_report_dict = classification_report(y_test, nb_predictions, output_dict=True)\r\n\r\n\r\ndef plt_NB():\r\n\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(nb_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Naive Bayes Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for Naive Bayes classifier\r\n    plt.figure()\r\n    plt.imshow(nb_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - Naive Bayes')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = nb_cm.max() / 2\r\n    for i, j in np.ndindex(nb_cm.shape):\r\n        plt.text(j, i, format(nb_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if nb_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\"\"\"________KNN Algorithm________\"\"\"\r\n# Train the K-Nearest Neighbors classifier\r\nknn_classifier = KNeighborsClassifier()\r\nknn_classifier.fit(X_train, y_train)\r\n# Predict using the K-Nearest Neighbors classifier\r\nknn_predictions = knn_classifier.predict(X_test)\r\nknn_accuracy = accuracy_score(y_test, knn_predictions)\r\nknn_classifier_report = classification_report(y_test, knn_predictions)\r\nknn_classifier_report_dict = classification_report(y_test, knn_predictions, output_dict=True)\r\n\r\n\r\ndef plt_KNN():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(knn_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"K-Nearest Neighbors Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for Naive Bayes classifier\r\n    plt.figure()\r\n    plt.imshow(nb_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - KNN')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = nb_cm.max() / 2\r\n    for i, j in np.ndindex(nb_cm.shape):\r\n        plt.text(j, i, format(nb_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if nb_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\"\"\"________Decision Tree________\"\"\"\r\n# Train the Decision Tree classifier\r\ndt_classifier = DecisionTreeClassifier(max_depth=None)\r\ndt_classifier.fit(X_train, y_train)\r\n# Predict using the Decision Tree classifier\r\ndt_predictions = dt_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Decision Tree classifier\r\ndt_cm = confusion_matrix(y_test, dt_predictions)\r\ndt_accuracy = accuracy_score(y_test, dt_predictions)\r\ndt_classifier_report = classification_report(y_test, dt_predictions)\r\ndt_classifier_report_dict = classification_report(y_test, dt_predictions, output_dict=True)\r\n\r\n\r\ndef plt_DT():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(dt_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Decision Tree Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for Naive Bayes classifier\r\n    plt.figure()\r\n    plt.imshow(nb_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - Decision Tree')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = nb_cm.max() / 2\r\n    for i, j in np.ndindex(nb_cm.shape):\r\n        plt.text(j, i, format(nb_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if nb_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\"\"\"________Logistic Regression Algorithm________\"\"\"\r\n# Train the Logistic Regression classifier\r\nlr_classifier = LogisticRegression(max_iter=1000)\r\nlr_classifier.fit(X_train, y_train)\r\n# Predict using the Logistic Regression classifier\r\nlr_predictions = lr_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Logistic Regression classifier\r\nlr_cm = confusion_matrix(y_test, lr_predictions)\r\nlr_accuracy = accuracy_score(y_test, lr_predictions)\r\nlr_classifier_report = classification_report(y_test, lr_predictions)\r\nlr_classifier_report_dict = classification_report(y_test, lr_predictions, output_dict=True)\r\n\r\n\r\ndef plt_LR():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(lr_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Logistic Regression Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for classifier\r\n    plt.figure()\r\n    plt.imshow(nb_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - Logistic Regression')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = lr_cm.max() / 2\r\n    for i, j in np.ndindex(lr_cm.shape):\r\n        plt.text(j, i, format(lr_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if lr_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\"\"\"________Random Forest Algorithm________\"\"\"\r\n# Train the Random Forest classifier\r\nrf_classifier = RandomForestClassifier(n_estimators=100)\r\nrf_classifier.fit(X_train, y_train)\r\n# Predict using the Random Forest classifier\r\nrf_predictions = rf_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Random Forest classifier\r\nrf_cm = confusion_matrix(y_test, rf_predictions)\r\nrf_accuracy = accuracy_score(y_test, rf_predictions)\r\nrf_classifier_report = classification_report(y_test, rf_predictions)\r\nrf_classifier_report_dict = classification_report(y_test, rf_predictions, output_dict=True)\r\n\r\n\r\ndef plt_RF():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(rf_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Random Forest Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for  classifier\r\n    plt.figure()\r\n    plt.imshow(rf_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - Random Forest')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = rf_cm.max() / 2\r\n    for i, j in np.ndindex(rf_cm.shape):\r\n        plt.text(j, i, format(rf_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if rf_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n# Selecting the best suitable algorithm based on classifier_report\r\nmodels = {\r\n    'Naive Bayes': nb_classifier_report,\r\n    'K-Nearest Neighbors (KNN)': knn_classifier_report,\r\n    'Decision Tree': dt_classifier_report,\r\n    'Logistic Regression': lr_classifier_report,\r\n    'Random Forest': rf_classifier_report\r\n}\r\nbest_model = max(models, key=models.get)\r\n\r\n# Saving the model\r\npickle.dump(nb_classifier, open('res/heart_disease_classifier_NB.pkl', 'wb'))\r\npickle.dump(knn_classifier, open('res/heart_disease_classifier_KNN.pkl', 'wb'))\r\npickle.dump(dt_classifier, open('res/heart_disease_classifier_DT.pkl', 'wb'))\r\npickle.dump(lr_classifier, open('res/heart_disease_classifier_LR.pkl', 'wb'))\r\npickle.dump(rf_classifier, open('res/heart_disease_classifier_RF.pkl', 'wb'))\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classifier_Models/Classifier_model_builder_heart.py b/Classifier_Models/Classifier_model_builder_heart.py
--- a/Classifier_Models/Classifier_model_builder_heart.py	(revision 43ce86db7bbfd47761b3d9540c38cdf64f4c76fa)
+++ b/Classifier_Models/Classifier_model_builder_heart.py	(date 1690296889637)
@@ -12,7 +12,7 @@
 from sklearn.ensemble import RandomForestClassifier
 from sklearn.metrics import classification_report
 
-url = "https://raw.githubusercontent.com/ChakraDeep8/Hypertension_Stroke_DiseasePrediction/master/res/heart.csv"
+url = "res/heart.csv"
 heart = pd.read_csv(url)
 
 # Ordinal feature encoding
Index: Home.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import streamlit as st\r\nfrom PIL import Image\r\nfrom multiapp import MultiApp\r\nfrom Apps import Hypertension_App, Stroke_App, Heart_Disease  # import your app modules here\r\nimport base64\r\nfrom pathlib import Path\r\nfrom PIL import Image\r\n\r\n\r\ndef load_bootstrap():\r\n    return st.markdown(\r\n        '<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\">',\r\n        unsafe_allow_html=True)\r\n\r\n\r\napp = MultiApp()\r\nst.set_page_config(\r\n    page_title=\"Disease Predictor App\",\r\n    page_icon=Image.open(\"images/medical-team.png\"),\r\n    layout=\"wide\",\r\n\r\n)\r\n\r\nload_bootstrap()\r\n\r\n\r\n\r\n\r\n\r\nst.markdown(\r\n    \"\"\"\r\n    <style>\r\n    .markdown-section {\r\n        margin-left: 10px;\r\n    }\r\n    </style>\r\n    \"\"\",\r\n    unsafe_allow_html=True\r\n)\r\n\r\ncol1, col2 = st.columns([1, 1], gap=\"small\")\r\nwith col1:\r\n    image = Image.open('images\\med.png')\r\n    st.image(image)\r\n    col1.empty()\r\nwith col2:\r\n    col2.empty()\r\n    st.markdown(\"\"\"\r\n    # Disease Detector App\r\n\r\n    **In the realm of healthcare, predicting diseases before they manifest can be a game-changer. \r\n    It can lead to early interventions, better management of health conditions, and improved patient outcomes. \r\n    To this end, we propose the development of a Disease Prediction Model using Machine Learning (ML) techniques.**\r\n\r\n    This model will analyze various health parameters of an individual and predict the likelihood of them developing a specific disease.\r\n\r\n    _The parameters could include_ `age, gender, lifestyle habits, genetic factors, and existing health conditions` _, among others._\r\n    \"\"\")\r\nst.write()\r\n\r\n# Add all your application here\r\napp.add_app(\"Heart Disease Detector\", Heart_Disease.app)\r\napp.add_app(\"Hypertension Detector\", Hypertension_App.app)\r\napp.add_app(\"Stroke Detector\", Stroke_App.app)\r\n# The main app\r\napp.run()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Home.py b/Home.py
--- a/Home.py	(revision 43ce86db7bbfd47761b3d9540c38cdf64f4c76fa)
+++ b/Home.py	(date 1690296257590)
@@ -1,18 +1,9 @@
 import streamlit as st
-from PIL import Image
 from multiapp import MultiApp
 from Apps import Hypertension_App, Stroke_App, Heart_Disease  # import your app modules here
-import base64
-from pathlib import Path
 from PIL import Image
 
 
-def load_bootstrap():
-    return st.markdown(
-        '<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">',
-        unsafe_allow_html=True)
-
-
 app = MultiApp()
 st.set_page_config(
     page_title="Disease Predictor App",
@@ -21,9 +12,6 @@
 
 )
 
-load_bootstrap()
-
-
 
 
 
Index: Classifier_Models/Classifier_model_builder_stroke.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\r\nimport streamlit as st\r\nfrom sklearn.model_selection import train_test_split\r\nfrom sklearn.neighbors import KNeighborsClassifier\r\nfrom sklearn.naive_bayes import GaussianNB\r\nimport pandas as pd\r\nfrom sklearn.tree import DecisionTreeClassifier\r\nimport pickle\r\nfrom sklearn.metrics import confusion_matrix, accuracy_score\r\nimport matplotlib.pyplot as plt\r\nfrom sklearn.linear_model import LogisticRegression\r\nfrom sklearn.ensemble import RandomForestClassifier\r\nfrom sklearn.metrics import classification_report\r\n\r\nurl = \"https://raw.githubusercontent.com/ChakraDeep8/Hypertension_Stroke_DiseasePrediction/master/res/stroke_data.csv\"\r\nstroke = pd.read_csv(url)\r\n\r\n\r\n# Ordinal feature encoding\r\n\r\ndf = stroke.copy()\r\nencode = ['sex', 'hypertension', 'heart_disease', 'ever_married', 'work_type', 'Residence_type', 'smoking_status']\r\n\r\nfor col in encode:\r\n    dummy = pd.get_dummies(df[col], prefix=col)\r\n    df = pd.concat([df, dummy], axis=1)\r\n    del df[col]\r\n    del dummy\r\n\r\n# Separating X and y\r\nX = df.drop('stroke', axis=1)\r\nY = df['stroke']\r\n\r\n# Split the dataset into training and testing sets\r\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)\r\n\r\n\"\"\"________Naive Bayes Algorithm________\"\"\"\r\n# Train the Naive Bayes classifier\r\nnb_classifier = GaussianNB(var_smoothing=1e-9)\r\nnb_classifier.fit(X_train, y_train)\r\n# Predict using the Naive Bayes classifier\r\nnb_predictions = nb_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Naive Bayes classifier\r\nnb_cm = confusion_matrix(y_test, nb_predictions)\r\nnb_accuracy = accuracy_score(y_test, nb_predictions)\r\nnb_classifier_report = classification_report(y_test, nb_predictions)\r\nnb_classifier_report_dict = classification_report(y_test, nb_predictions,output_dict=True)\r\n\r\ndef plt_NB():\r\n\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(nb_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Naive Bayes Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for Naive Bayes classifier\r\n    plt.figure()\r\n    plt.imshow(nb_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - Naive Bayes')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = nb_cm.max() / 2\r\n    for i, j in np.ndindex(nb_cm.shape):\r\n        plt.text(j, i, format(nb_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if nb_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\"\"\"________KNN Algorithm________\"\"\"\r\n# Train the K-Nearest Neighbors classifier\r\nknn_classifier = KNeighborsClassifier()\r\nknn_classifier.fit(X_train, y_train)\r\n# Predict using the K-Nearest Neighbors classifier\r\nknn_predictions = knn_classifier.predict(X_test)\r\nknn_accuracy = accuracy_score(y_test, knn_predictions)\r\nknn_classifier_report = classification_report(y_test, knn_predictions)\r\nknn_classifier_report_dict = classification_report(y_test, knn_predictions, output_dict=True)\r\n\r\n\r\ndef plt_KNN():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(knn_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"K-Nearest Neighbors Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for Naive Bayes classifier\r\n    plt.figure()\r\n    plt.imshow(nb_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - KNN')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = nb_cm.max() / 2\r\n    for i, j in np.ndindex(nb_cm.shape):\r\n        plt.text(j, i, format(nb_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if nb_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\"\"\"________Decision Tree________\"\"\"\r\n# Train the Decision Tree classifier\r\ndt_classifier = DecisionTreeClassifier(max_depth=None)\r\ndt_classifier.fit(X_train, y_train)\r\n# Predict using the Decision Tree classifier\r\ndt_predictions = dt_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Decision Tree classifier\r\ndt_cm = confusion_matrix(y_test, dt_predictions)\r\ndt_accuracy = accuracy_score(y_test, dt_predictions)\r\ndt_classifier_report = classification_report(y_test, dt_predictions)\r\ndt_classifier_report_dict = classification_report(y_test, dt_predictions, output_dict=True)\r\n\r\n\r\ndef plt_DT():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(dt_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Decision Tree Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for Naive Bayes classifier\r\n    plt.figure()\r\n    plt.imshow(nb_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - Decision Tree')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = nb_cm.max() / 2\r\n    for i, j in np.ndindex(nb_cm.shape):\r\n        plt.text(j, i, format(nb_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if nb_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\"\"\"________Logistic Regression Algorithm________\"\"\"\r\n# Train the Logistic Regression classifier\r\nlr_classifier = LogisticRegression(max_iter=1000)\r\nlr_classifier.fit(X_train, y_train)\r\n# Predict using the Logistic Regression classifier\r\nlr_predictions = lr_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Logistic Regression classifier\r\nlr_cm = confusion_matrix(y_test, lr_predictions)\r\nlr_accuracy = accuracy_score(y_test, lr_predictions)\r\nlr_classifier_report = classification_report(y_test, lr_predictions)\r\nlr_classifier_report_dict = classification_report(y_test, lr_predictions, output_dict=True)\r\n\r\n\r\ndef plt_LR():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(lr_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Logistic Regression Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for classifier\r\n    plt.figure()\r\n    plt.imshow(nb_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - Logistic Regression')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = lr_cm.max() / 2\r\n    for i, j in np.ndindex(lr_cm.shape):\r\n        plt.text(j, i, format(lr_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if lr_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\"\"\"________Random Forest Algorithm________\"\"\"\r\n# Train the Random Forest classifier\r\nrf_classifier = RandomForestClassifier(n_estimators=100)\r\nrf_classifier.fit(X_train, y_train)\r\n# Predict using the Random Forest classifier\r\nrf_predictions = rf_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Random Forest classifier\r\nrf_cm = confusion_matrix(y_test, rf_predictions)\r\nrf_accuracy = accuracy_score(y_test, rf_predictions)\r\nrf_classifier_report = classification_report(y_test, rf_predictions)\r\nrf_classifier_report_dict = classification_report(y_test, rf_predictions, output_dict=True)\r\n\r\n\r\ndef plt_RF():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(rf_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Random Forest Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for  classifier\r\n    plt.figure()\r\n    plt.imshow(rf_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - Random Forest')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = rf_cm.max() / 2\r\n    for i, j in np.ndindex(rf_cm.shape):\r\n        plt.text(j, i, format(rf_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if rf_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n# Selecting the best suitable algorithm based on classifier_report\r\nmodels = {\r\n    'Naive Bayes': nb_classifier_report,\r\n    'K-Nearest Neighbors (KNN)': knn_classifier_report,\r\n    'Decision Tree': dt_classifier_report,\r\n    'Logistic Regression': lr_classifier_report,\r\n    'Random Forest': rf_classifier_report\r\n}\r\n\r\nbest_model = max(models, key=models.get)\r\n# Saving the model\r\npickle.dump(nb_classifier, open('res/stroke_disease_classifier_NB.pkl', 'wb'))\r\npickle.dump(knn_classifier, open('res/stroke_disease_classifier_KNN.pkl', 'wb'))\r\npickle.dump(dt_classifier, open('res/stroke_disease_classifier_DT.pkl', 'wb'))\r\npickle.dump(lr_classifier, open('res/stroke_disease_classifier_LR.pkl', 'wb'))\r\npickle.dump(rf_classifier, open('res/stroke_disease_classifier_RF.pkl', 'wb'))\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classifier_Models/Classifier_model_builder_stroke.py b/Classifier_Models/Classifier_model_builder_stroke.py
--- a/Classifier_Models/Classifier_model_builder_stroke.py	(revision 43ce86db7bbfd47761b3d9540c38cdf64f4c76fa)
+++ b/Classifier_Models/Classifier_model_builder_stroke.py	(date 1690296889663)
@@ -12,7 +12,7 @@
 from sklearn.ensemble import RandomForestClassifier
 from sklearn.metrics import classification_report
 
-url = "https://raw.githubusercontent.com/ChakraDeep8/Hypertension_Stroke_DiseasePrediction/master/res/stroke_data.csv"
+url = "res/stroke_data.csv"
 stroke = pd.read_csv(url)
 
 
Index: Classifier_Models/Classifier_model_builder_kidney.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\r\nimport streamlit as st\r\nfrom sklearn.model_selection import train_test_split\r\nfrom sklearn.neighbors import KNeighborsClassifier\r\nfrom sklearn.naive_bayes import GaussianNB\r\nimport pandas as pd\r\nfrom sklearn.tree import DecisionTreeClassifier\r\nimport pickle\r\nfrom sklearn.metrics import confusion_matrix, accuracy_score\r\nimport matplotlib.pyplot as plt\r\nfrom sklearn.linear_model import LogisticRegression\r\nfrom sklearn.ensemble import RandomForestClassifier\r\nfrom sklearn.metrics import classification_report\r\n\r\nurl = \"https://raw.githubusercontent.com/ChakraDeep8/Hypertension_Stroke_DiseasePrediction/master/res/CKD_Preprocessed.csv\"\r\nhype = pd.read_csv(url)\r\nhype = hype.loc[:, ~hype.columns.str.contains('^Unnamed')]\r\n\r\nstroke = pd.read_csv(url)\r\n# print(hype.info())\r\n# Ordinal feature encoding\r\n\r\ndf = hype.copy()\r\nencode = ['rbc', 'pc', 'pcc', 'ba', 'htn', 'dm', 'cad', 'appet', 'pe', 'ane']\r\n\r\nfor col in encode:\r\n    dummy = pd.get_dummies(df[col], prefix=col)\r\n    df = pd.concat([df, dummy], axis=1)\r\n    del df[col]\r\n    del dummy\r\n\r\n# Separating X and y\r\nX = df.drop('target', axis=1)\r\nY = df['target']\r\n\r\n# Split the dataset into training and testing sets\r\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)\r\n\r\n\"\"\"________Naive Bayes Algorithm________\"\"\"\r\n# Train the Naive Bayes classifier\r\nnb_classifier = GaussianNB(var_smoothing=1e-9)\r\nnb_classifier.fit(X_train, y_train)\r\n# Predict using the Naive Bayes classifier\r\nnb_predictions = nb_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Naive Bayes classifier\r\nnb_cm = confusion_matrix(y_test, nb_predictions)\r\nnb_accuracy = accuracy_score(y_test, nb_predictions)\r\nnb_classifier_report = classification_report(y_test, nb_predictions)\r\nnb_classifier_report_dict = classification_report(y_test, nb_predictions, output_dict=True)\r\n\r\n\r\ndef plt_NB():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(nb_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Naive Bayes Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for Naive Bayes classifier\r\n    plt.figure()\r\n    plt.imshow(nb_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - Naive Bayes')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = nb_cm.max() / 2\r\n    for i, j in np.ndindex(nb_cm.shape):\r\n        plt.text(j, i, format(nb_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if nb_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\"\"\"________KNN Algorithm________\"\"\"\r\n# Train the K-Nearest Neighbors classifier\r\nknn_classifier = KNeighborsClassifier()\r\nknn_classifier.fit(X_train, y_train)\r\n# Predict using the K-Nearest Neighbors classifier\r\nknn_predictions = knn_classifier.predict(X_test)\r\nknn_accuracy = accuracy_score(y_test, knn_predictions)\r\nknn_classifier_report = classification_report(y_test, knn_predictions)\r\nknn_classifier_report_dict = classification_report(y_test, knn_predictions, output_dict=True)\r\n\r\n\r\ndef plt_KNN():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(knn_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"K-Nearest Neighbors Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for Naive Bayes classifier\r\n    plt.figure()\r\n    plt.imshow(nb_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - KNN')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = nb_cm.max() / 2\r\n    for i, j in np.ndindex(nb_cm.shape):\r\n        plt.text(j, i, format(nb_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if nb_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\"\"\"________Decision Tree________\"\"\"\r\n# Train the Decision Tree classifier\r\ndt_classifier = DecisionTreeClassifier(max_depth=None)\r\ndt_classifier.fit(X_train, y_train)\r\n# Predict using the Decision Tree classifier\r\ndt_predictions = dt_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Decision Tree classifier\r\ndt_cm = confusion_matrix(y_test, dt_predictions)\r\ndt_accuracy = accuracy_score(y_test, dt_predictions)\r\ndt_classifier_report = classification_report(y_test, dt_predictions)\r\ndt_classifier_report_dict = classification_report(y_test, dt_predictions, output_dict=True)\r\n\r\n\r\ndef plt_DT():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(dt_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Decision Tree Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for Naive Bayes classifier\r\n    plt.figure()\r\n    plt.imshow(nb_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - Decision Tree')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = nb_cm.max() / 2\r\n    for i, j in np.ndindex(nb_cm.shape):\r\n        plt.text(j, i, format(nb_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if nb_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\"\"\"________Logistic Regression Algorithm________\"\"\"\r\n# Train the Logistic Regression classifier\r\nlr_classifier = LogisticRegression(max_iter=1000)\r\nlr_classifier.fit(X_train, y_train)\r\n# Predict using the Logistic Regression classifier\r\nlr_predictions = lr_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Logistic Regression classifier\r\nlr_cm = confusion_matrix(y_test, lr_predictions)\r\nlr_accuracy = accuracy_score(y_test, lr_predictions)\r\nlr_classifier_report = classification_report(y_test, lr_predictions)\r\nlr_classifier_report_dict = classification_report(y_test, lr_predictions, output_dict=True)\r\n\r\n\r\ndef plt_LR():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(lr_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Logistic Regression Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for classifier\r\n    plt.figure()\r\n    plt.imshow(nb_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - Logistic Regression')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = lr_cm.max() / 2\r\n    for i, j in np.ndindex(lr_cm.shape):\r\n        plt.text(j, i, format(lr_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if lr_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\"\"\"________Random Forest Algorithm________\"\"\"\r\n# Train the Random Forest classifier\r\nrf_classifier = RandomForestClassifier(n_estimators=100)\r\nrf_classifier.fit(X_train, y_train)\r\n# Predict using the Random Forest classifier\r\nrf_predictions = rf_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Random Forest classifier\r\nrf_cm = confusion_matrix(y_test, rf_predictions)\r\nrf_accuracy = accuracy_score(y_test, rf_predictions)\r\nrf_classifier_report = classification_report(y_test, rf_predictions)\r\nrf_classifier_report_dict = classification_report(y_test, rf_predictions, output_dict=True)\r\n\r\n\r\ndef plt_RF():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(rf_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Random Forest Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for  classifier\r\n    plt.figure()\r\n    plt.imshow(rf_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - Random Forest')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = rf_cm.max() / 2\r\n    for i, j in np.ndindex(rf_cm.shape):\r\n        plt.text(j, i, format(rf_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if rf_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n# Compare the 5 models and select the best algorithm\r\nmodels = {\r\n    'Naive Bayes': nb_classifier_report,\r\n    'K-Nearest Neighbors (KNN)': knn_classifier_report,\r\n    'Decision Tree': dt_classifier_report,\r\n    'Logistic Regression': lr_classifier_report,\r\n    'Random Forest': rf_classifier_report\r\n}\r\nbest_model = max(models, key=models.get)\r\n\r\n# Saving the model\r\npickle.dump(nb_classifier, open('res/kidney_disease_classifier_NB.pkl', 'wb'))\r\npickle.dump(knn_classifier, open('res/kidney_disease_classifier_KNN.pkl', 'wb'))\r\npickle.dump(dt_classifier, open('res/kidney_classifier_DT.pkl', 'wb'))\r\npickle.dump(lr_classifier, open('res/kidney_disease_classifier_LR.pkl', 'wb'))\r\npickle.dump(rf_classifier, open('res/kidney_disease_classifier_RF.pkl', 'wb'))\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classifier_Models/Classifier_model_builder_kidney.py b/Classifier_Models/Classifier_model_builder_kidney.py
--- a/Classifier_Models/Classifier_model_builder_kidney.py	(revision 43ce86db7bbfd47761b3d9540c38cdf64f4c76fa)
+++ b/Classifier_Models/Classifier_model_builder_kidney.py	(date 1690296889625)
@@ -12,7 +12,7 @@
 from sklearn.ensemble import RandomForestClassifier
 from sklearn.metrics import classification_report
 
-url = "https://raw.githubusercontent.com/ChakraDeep8/Hypertension_Stroke_DiseasePrediction/master/res/CKD_Preprocessed.csv"
+url = "res/CKD_Preprocessed.csv"
 hype = pd.read_csv(url)
 hype = hype.loc[:, ~hype.columns.str.contains('^Unnamed')]
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"3bceba5c-1534-412c-a912-a524c5b07970\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Home.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Home.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/res/heart_disease_classifier_DT.pkl\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/res/heart_disease_classifier_DT.pkl\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/res/heart_disease_classifier_KNN.pkl\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/res/heart_disease_classifier_KNN.pkl\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/res/heart_disease_classifier_LR.pkl\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/res/heart_disease_classifier_LR.pkl\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/res/heart_disease_classifier_NB.pkl\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/res/heart_disease_classifier_NB.pkl\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/res/heart_disease_classifier_RF.pkl\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/res/heart_disease_classifier_RF.pkl\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/res/hypertension_disease_classifier_DT.pkl\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/res/hypertension_disease_classifier_DT.pkl\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/res/hypertension_disease_classifier_KNN.pkl\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/res/hypertension_disease_classifier_KNN.pkl\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/res/hypertension_disease_classifier_LR.pkl\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/res/hypertension_disease_classifier_LR.pkl\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/res/hypertension_disease_classifier_NB.pkl\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/res/hypertension_disease_classifier_NB.pkl\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/res/hypertension_disease_classifier_RF.pkl\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/res/hypertension_disease_classifier_RF.pkl\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/res/kidney_disease_classifier_DT.pkl\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/res/kidney_disease_classifier_DT.pkl\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/res/stroke_disease_classifier_DT.pkl\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/res/stroke_disease_classifier_DT.pkl\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/res/stroke_disease_classifier_RF.pkl\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/res/stroke_disease_classifier_RF.pkl\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"PUSH_AUTO_UPDATE\" value=\"true\" />\r\n    <option name=\"PUSH_TAGS\">\r\n      <GitPushTagMode>\r\n        <option name=\"argument\" value=\"--follow-tags\" />\r\n        <option name=\"title\" value=\"Current Branch\" />\r\n      </GitPushTagMode>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2SvsXvopiBfvBLkDHiYmxZWjp9S\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/deep/PycharmProjects/DiseasePrediction&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  },\r\n  &quot;keyToStringList&quot;: {\r\n    &quot;ChangesTree.GroupingKeys&quot;: [\r\n    ]\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\deep\\PycharmProjects\\DiseasePrediction\\Classifier_Models\" />\r\n      <recent name=\"C:\\Users\\deep\\PycharmProjects\\DiseasePrediction\\res\" />\r\n      <recent name=\"C:\\Users\\deep\\PycharmProjects\\DiseasePrediction\\images\" />\r\n      <recent name=\"C:\\Users\\deep\\PycharmProjects\\DiseasePrediction\\.streamlit\" />\r\n      <recent name=\"C:\\Users\\deep\\PycharmProjects\\DiseasePrediction\\pages\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Classifier_model_builder_hypertension\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"DiseasePrediction\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"C:\\Users\\deep\\PycharmProjects\\DiseasePrediction\\Classifier_model_builder_hypertension.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"PythonConfigurationType\" factoryName=\"Python\">\r\n      <module name=\"DiseasePrediction\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"true\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"3bceba5c-1534-412c-a912-a524c5b07970\" name=\"Changes\" comment=\"\" />\r\n      <created>1690038431660</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1690038431660</updated>\r\n      <workItem from=\"1690091793345\" duration=\"1402000\" />\r\n      <workItem from=\"1690097267704\" duration=\"3588000\" />\r\n      <workItem from=\"1690110315042\" duration=\"1241000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"First\">\r\n      <created>1690038606065</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690038606065</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Pikcle\">\r\n      <created>1690041485079</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690041485079</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Pikcle\">\r\n      <created>1690041525525</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690041525525</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Pikcle_stroke\">\r\n      <created>1690042216929</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690042216929</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Pikcle_stroke\">\r\n      <created>1690043927950</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690043927950</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Pikcle_stroke\">\r\n      <created>1690044218297</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690044218297</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"First\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690092549440</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690092549440</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"First\">\r\n      <created>1690109213469</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690109213469</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Updated stoke dataset\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690110465164</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690110465164</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Stroke webpage\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690110489903</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690110489903</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"First\">\r\n      <created>1690112644765</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690112644765</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"KNN_pickle\">\r\n      <created>1690112868079</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690112868079</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"stroke_knn_pickle\">\r\n      <created>1690112928425</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690112928425</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Second update\">\r\n      <created>1690112968877</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690112968877</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Third update\">\r\n      <created>1690128242073</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690128242073</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Some Changes\">\r\n      <created>1690129410403</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690129410403</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"implement heart disease\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690131397731</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690131397731</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"implement heart disease\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690131482996</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690131482996</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"Web page buildup\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690191289621</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690191289621</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"added config.toml and some changes in Home.py\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690205462488</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690205462488</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Major Update!!&#10;1. Change in Web page UI (Make it more user friendly)&#10;2. Add Multiselector for all plots&#10;3. Changes in Classifier files&#10;4. Add Algorithms probability\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690229274816</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690229274816</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"CKD_Preprocessed file upload\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690284715712</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690284715712</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"Kidney module added\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690289818269</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690289818269</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"med update\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690291484074</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690291484074</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"Update 3.0\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690294229361</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690294229361</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"26\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <option name=\"CLEAR_INITIAL_COMMIT_MESSAGE\" value=\"true\" />\r\n    <MESSAGE value=\"Pikcle\" />\r\n    <MESSAGE value=\"Pikcle_stroke\" />\r\n    <MESSAGE value=\"Updated stoke dataset\" />\r\n    <MESSAGE value=\"Stroke webpage\" />\r\n    <MESSAGE value=\"First\" />\r\n    <MESSAGE value=\"KNN_pickle\" />\r\n    <MESSAGE value=\"stroke_knn_pickle\" />\r\n    <MESSAGE value=\"Second update\" />\r\n    <MESSAGE value=\"Third update\" />\r\n    <MESSAGE value=\"Some Changes\" />\r\n    <MESSAGE value=\"implement heart disease\" />\r\n    <MESSAGE value=\"Web page buildup\" />\r\n    <MESSAGE value=\"added config.toml and some changes in Home.py\" />\r\n    <MESSAGE value=\"Major Update!!&#10;1. Change in Web page UI (Make it more user friendly)&#10;2. Add Multiselector for all plots&#10;3. Changes in Classifier files&#10;4. Add Algorithms probability\" />\r\n    <MESSAGE value=\"CKD_Preprocessed file upload\" />\r\n    <MESSAGE value=\"Kidney module added\" />\r\n    <MESSAGE value=\"med update\" />\r\n    <MESSAGE value=\"Update 3.0\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Update 3.0\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 43ce86db7bbfd47761b3d9540c38cdf64f4c76fa)
+++ b/.idea/workspace.xml	(date 1690296733882)
@@ -5,21 +5,9 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="3bceba5c-1534-412c-a912-a524c5b07970" name="Changes" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/DiseasePrediction.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/DiseasePrediction.iml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Home.py" beforeDir="false" afterPath="$PROJECT_DIR$/Home.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/res/heart_disease_classifier_DT.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/heart_disease_classifier_DT.pkl" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/res/heart_disease_classifier_KNN.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/heart_disease_classifier_KNN.pkl" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/res/heart_disease_classifier_LR.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/heart_disease_classifier_LR.pkl" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/res/heart_disease_classifier_NB.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/heart_disease_classifier_NB.pkl" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/res/heart_disease_classifier_RF.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/heart_disease_classifier_RF.pkl" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/res/hypertension_disease_classifier_DT.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/hypertension_disease_classifier_DT.pkl" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/res/hypertension_disease_classifier_KNN.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/hypertension_disease_classifier_KNN.pkl" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/res/hypertension_disease_classifier_LR.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/hypertension_disease_classifier_LR.pkl" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/res/hypertension_disease_classifier_NB.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/hypertension_disease_classifier_NB.pkl" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/res/hypertension_disease_classifier_RF.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/hypertension_disease_classifier_RF.pkl" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/res/kidney_disease_classifier_DT.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/kidney_disease_classifier_DT.pkl" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/res/stroke_disease_classifier_DT.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/stroke_disease_classifier_DT.pkl" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/res/stroke_disease_classifier_RF.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/stroke_disease_classifier_RF.pkl" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -54,27 +42,27 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
-    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;C:/Users/deep/PycharmProjects/DiseasePrediction&quot;,
-    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
-    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
-    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
-    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
-    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;,
-    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "ASKED_ADD_EXTERNAL_FILES": "true",
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "WebServerToolWindowFactoryState": "false",
+    "git-widget-placeholder": "master",
+    "ignore.virus.scanning.warn.message": "true",
+    "last_opened_file_path": "C:/Users/deep/PycharmProjects/DiseasePrediction",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
+    "settings.editor.selected.configurable": "com.jetbrains.python.configuration.PythonContentEntriesConfigurable",
+    "vue.rearranger.settings.migration": "true"
   },
-  &quot;keyToStringList&quot;: {
-    &quot;ChangesTree.GroupingKeys&quot;: [
+  "keyToStringList": {
+    "ChangesTree.GroupingKeys": [
     ]
   }
-}</component>
+}]]></component>
   <component name="RecentsManager">
     <key name="MoveFile.RECENT_KEYS">
       <recent name="C:\Users\deep\PycharmProjects\DiseasePrediction\Classifier_Models" />
@@ -329,7 +317,15 @@
       <option name="project" value="LOCAL" />
       <updated>1690294229361</updated>
     </task>
-    <option name="localTasksCounter" value="26" />
+    <task id="LOCAL-00026" summary="Another update">
+      <option name="closed" value="true" />
+      <created>1690295967300</created>
+      <option name="number" value="00026" />
+      <option name="presentableId" value="LOCAL-00026" />
+      <option name="project" value="LOCAL" />
+      <updated>1690295967300</updated>
+    </task>
+    <option name="localTasksCounter" value="27" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -356,6 +352,7 @@
     <MESSAGE value="Kidney module added" />
     <MESSAGE value="med update" />
     <MESSAGE value="Update 3.0" />
-    <option name="LAST_COMMIT_MESSAGE" value="Update 3.0" />
+    <MESSAGE value="Another update" />
+    <option name="LAST_COMMIT_MESSAGE" value="Another update" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/DiseasePrediction.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <excludeFolder url=\"file://$MODULE_DIR$/Dic\" />\r\n      <excludeFolder url=\"file://$MODULE_DIR$/venv\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.10\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n  <component name=\"PyDocumentationSettings\">\r\n    <option name=\"renderExternalDocumentation\" value=\"true\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/DiseasePrediction.iml b/.idea/DiseasePrediction.iml
--- a/.idea/DiseasePrediction.iml	(revision 43ce86db7bbfd47761b3d9540c38cdf64f4c76fa)
+++ b/.idea/DiseasePrediction.iml	(date 1690296733876)
@@ -1,10 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
-    <content url="file://$MODULE_DIR$">
-      <excludeFolder url="file://$MODULE_DIR$/Dic" />
-      <excludeFolder url="file://$MODULE_DIR$/venv" />
-    </content>
+    <content url="file://$MODULE_DIR$" />
     <orderEntry type="jdk" jdkName="Python 3.10" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
Index: Classifier_Models/Classifier_model_builder_hypertension.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\r\nimport streamlit as st\r\nfrom sklearn.model_selection import train_test_split\r\nfrom sklearn.neighbors import KNeighborsClassifier\r\nfrom sklearn.naive_bayes import GaussianNB\r\nimport pandas as pd\r\nfrom sklearn.tree import DecisionTreeClassifier\r\nimport pickle\r\nfrom sklearn.metrics import confusion_matrix, accuracy_score\r\nimport matplotlib.pyplot as plt\r\nfrom sklearn.linear_model import LogisticRegression\r\nfrom sklearn.ensemble import RandomForestClassifier\r\nfrom sklearn.metrics import classification_report\r\n\r\nurl = \"https://raw.githubusercontent.com/ChakraDeep8/Hypertension_Stroke_DiseasePrediction/master/res/hypertension_data.csv\"\r\nhype = pd.read_csv(url)\r\nprint(hype.info())\r\n# Ordinal feature encoding\r\n\r\ndf = hype.copy()\r\nencode = ['sex', 'cp', 'fbs', 'restecg', 'exang', 'slope']\r\n\r\nfor col in encode:\r\n    dummy = pd.get_dummies(df[col], prefix=col)\r\n    df = pd.concat([df, dummy], axis=1)\r\n    del df[col]\r\n    del dummy\r\n\r\n# Separating X and y\r\nX = df.drop('target', axis=1)\r\nY = df['target']\r\n\r\n# Split the dataset into training and testing sets\r\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)\r\n\r\n\r\n\"\"\"________Naive Bayes Algorithm________\"\"\"\r\n# Train the Naive Bayes classifier\r\nnb_classifier = GaussianNB(var_smoothing=1e-9)\r\nnb_classifier.fit(X_train, y_train)\r\n# Predict using the Naive Bayes classifier\r\nnb_predictions = nb_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Naive Bayes classifier\r\nnb_cm = confusion_matrix(y_test, nb_predictions)\r\nnb_accuracy = accuracy_score(y_test, nb_predictions)\r\nnb_classifier_report = classification_report(y_test, nb_predictions)\r\nnb_classifier_report_dict = classification_report(y_test, nb_predictions,output_dict=True)\r\n\r\ndef plt_NB():\r\n\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(nb_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Naive Bayes Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for Naive Bayes classifier\r\n    plt.figure()\r\n    plt.imshow(nb_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - Naive Bayes')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = nb_cm.max() / 2\r\n    for i, j in np.ndindex(nb_cm.shape):\r\n        plt.text(j, i, format(nb_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if nb_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\"\"\"________KNN Algorithm________\"\"\"\r\n# Train the K-Nearest Neighbors classifier\r\nknn_classifier = KNeighborsClassifier()\r\nknn_classifier.fit(X_train, y_train)\r\n# Predict using the K-Nearest Neighbors classifier\r\nknn_predictions = knn_classifier.predict(X_test)\r\nknn_accuracy = accuracy_score(y_test, knn_predictions)\r\nknn_classifier_report = classification_report(y_test, knn_predictions)\r\nknn_classifier_report_dict = classification_report(y_test, knn_predictions, output_dict=True)\r\n\r\n\r\ndef plt_KNN():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(knn_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"K-Nearest Neighbors Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for Naive Bayes classifier\r\n    plt.figure()\r\n    plt.imshow(nb_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - KNN')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = nb_cm.max() / 2\r\n    for i, j in np.ndindex(nb_cm.shape):\r\n        plt.text(j, i, format(nb_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if nb_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\"\"\"________Decision Tree________\"\"\"\r\n# Train the Decision Tree classifier\r\ndt_classifier = DecisionTreeClassifier(max_depth=None)\r\ndt_classifier.fit(X_train, y_train)\r\n# Predict using the Decision Tree classifier\r\ndt_predictions = dt_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Decision Tree classifier\r\ndt_cm = confusion_matrix(y_test, dt_predictions)\r\ndt_accuracy = accuracy_score(y_test, dt_predictions)\r\ndt_classifier_report = classification_report(y_test, dt_predictions)\r\ndt_classifier_report_dict = classification_report(y_test, dt_predictions, output_dict=True)\r\n\r\n\r\ndef plt_DT():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(dt_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Decision Tree Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for Naive Bayes classifier\r\n    plt.figure()\r\n    plt.imshow(nb_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - Decision Tree')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = nb_cm.max() / 2\r\n    for i, j in np.ndindex(nb_cm.shape):\r\n        plt.text(j, i, format(nb_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if nb_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\"\"\"________Logistic Regression Algorithm________\"\"\"\r\n# Train the Logistic Regression classifier\r\nlr_classifier = LogisticRegression(max_iter=1000)\r\nlr_classifier.fit(X_train, y_train)\r\n# Predict using the Logistic Regression classifier\r\nlr_predictions = lr_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Logistic Regression classifier\r\nlr_cm = confusion_matrix(y_test, lr_predictions)\r\nlr_accuracy = accuracy_score(y_test, lr_predictions)\r\nlr_classifier_report = classification_report(y_test, lr_predictions)\r\nlr_classifier_report_dict = classification_report(y_test, lr_predictions, output_dict=True)\r\n\r\n\r\ndef plt_LR():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(lr_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Logistic Regression Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for classifier\r\n    plt.figure()\r\n    plt.imshow(nb_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - Logistic Regression')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = lr_cm.max() / 2\r\n    for i, j in np.ndindex(lr_cm.shape):\r\n        plt.text(j, i, format(lr_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if lr_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\"\"\"________Random Forest Algorithm________\"\"\"\r\n# Train the Random Forest classifier\r\nrf_classifier = RandomForestClassifier(n_estimators=100)\r\nrf_classifier.fit(X_train, y_train)\r\n# Predict using the Random Forest classifier\r\nrf_predictions = rf_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Random Forest classifier\r\nrf_cm = confusion_matrix(y_test, rf_predictions)\r\nrf_accuracy = accuracy_score(y_test, rf_predictions)\r\nrf_classifier_report = classification_report(y_test, rf_predictions)\r\nrf_classifier_report_dict = classification_report(y_test, rf_predictions, output_dict=True)\r\n\r\n\r\ndef plt_RF():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(rf_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Random Forest Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for  classifier\r\n    plt.figure()\r\n    plt.imshow(rf_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - Random Forest')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = rf_cm.max() / 2\r\n    for i, j in np.ndindex(rf_cm.shape):\r\n        plt.text(j, i, format(rf_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if rf_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n# Compare the 5 models and select the best algorithm\r\nmodels = {\r\n    'Naive Bayes': nb_classifier_report,\r\n    'K-Nearest Neighbors (KNN)': knn_classifier_report,\r\n    'Decision Tree': dt_classifier_report,\r\n    'Logistic Regression': lr_classifier_report,\r\n    'Random Forest': rf_classifier_report\r\n}\r\nbest_model = max(models, key=models.get)\r\n\r\n# Saving the model\r\npickle.dump(nb_classifier, open('res/hypertension_disease_classifier_NB.pkl', 'wb'))\r\npickle.dump(knn_classifier, open('res/hypertension_disease_classifier_KNN.pkl', 'wb'))\r\npickle.dump(dt_classifier, open('res/hypertension_disease_classifier_DT.pkl', 'wb'))\r\npickle.dump(lr_classifier, open('res/hypertension_disease_classifier_LR.pkl', 'wb'))\r\npickle.dump(rf_classifier, open('res/hypertension_disease_classifier_RF.pkl', 'wb'))\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classifier_Models/Classifier_model_builder_hypertension.py b/Classifier_Models/Classifier_model_builder_hypertension.py
--- a/Classifier_Models/Classifier_model_builder_hypertension.py	(revision 43ce86db7bbfd47761b3d9540c38cdf64f4c76fa)
+++ b/Classifier_Models/Classifier_model_builder_hypertension.py	(date 1690296889650)
@@ -12,7 +12,7 @@
 from sklearn.ensemble import RandomForestClassifier
 from sklearn.metrics import classification_report
 
-url = "https://raw.githubusercontent.com/ChakraDeep8/Hypertension_Stroke_DiseasePrediction/master/res/hypertension_data.csv"
+url = "res/hypertension_data.csv"
 hype = pd.read_csv(url)
 print(hype.info())
 # Ordinal feature encoding
