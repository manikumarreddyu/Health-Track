Index: Shapash/Shapash_Heart.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from shapash.explainer.smart_explainer import SmartExplainer\r\nfrom sklearn.ensemble import RandomForestRegressor\r\nimport pandas as pd\r\nfrom sklearn.model_selection import train_test_split\r\n\r\nurl = \"C:\\\\Users\\\\deep\\\\PycharmProjects\\\\DiseasePrediction\\\\res\\\\heart.csv\"\r\nheart = pd.read_csv(url)\r\n\r\n# Ordinal feature encoding\r\ndf = heart.copy()\r\nencode = ['Sex', 'ChestPainType', 'RestingECG', 'ExerciseAngina', 'ST_Slope']\r\n\r\nfor col in encode:\r\n    dummy = pd.get_dummies(df[col], prefix=col)\r\n    df = pd.concat([df, dummy], axis=1)\r\n    del df[col]\r\n    del dummy\r\n\r\n# Separating X and y\r\nX = df.drop('HeartDisease', axis=1)\r\nY = df['HeartDisease']\r\n\r\n# Split the dataset into training and testing sets\r\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)\r\nregressor = RandomForestRegressor(n_estimators=200).fit(X_train, y_train)\r\n\r\nxpl = SmartExplainer(model=regressor)\r\nxpl.compile(\r\n    x=X_test,\r\n\r\n)\r\napp = xpl.run_app(title_story='Tips Dataset')\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Shapash/Shapash_Heart.py b/Shapash/Shapash_Heart.py
--- a/Shapash/Shapash_Heart.py	(revision 36cd0071fafc951d5a33d944c2609159580f3a1e)
+++ b/Shapash/Shapash_Heart.py	(date 1690644714357)
@@ -1,32 +1,8 @@
-from shapash.explainer.smart_explainer import SmartExplainer
-from sklearn.ensemble import RandomForestRegressor
-import pandas as pd
-from sklearn.model_selection import train_test_split
-
-url = "C:\\Users\\deep\\PycharmProjects\\DiseasePrediction\\res\\heart.csv"
-heart = pd.read_csv(url)
-
-# Ordinal feature encoding
-df = heart.copy()
-encode = ['Sex', 'ChestPainType', 'RestingECG', 'ExerciseAngina', 'ST_Slope']
-
-for col in encode:
-    dummy = pd.get_dummies(df[col], prefix=col)
-    df = pd.concat([df, dummy], axis=1)
-    del df[col]
-    del dummy
-
-# Separating X and y
-X = df.drop('HeartDisease', axis=1)
-Y = df['HeartDisease']
-
-# Split the dataset into training and testing sets
-X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)
-regressor = RandomForestRegressor(n_estimators=200).fit(X_train, y_train)
-
-xpl = SmartExplainer(model=regressor)
-xpl.compile(
-    x=X_test,
-
-)
-app = xpl.run_app(title_story='Tips Dataset')
+def f(m, n):
+    ans = 1
+    count = 0
+    while ans <= m:
+        count = count + 1
+        ans = ans * n
+    return count
+print(f(2000, 3))
Index: requirements.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>streamlit==1.22.0\r\npandas==1.5.2\r\nnumpy==1.23.5\r\nscikit-learn==1.2.0\r\nmatplotlib==3.6.2\r\nshapash==2.3.5\r\nstreamlit-extras==0.2.7\r\nstreamlit-lottie==0.0.5
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/requirements.txt b/requirements.txt
--- a/requirements.txt	(revision 36cd0071fafc951d5a33d944c2609159580f3a1e)
+++ b/requirements.txt	(date 1690644714369)
@@ -5,4 +5,7 @@
 matplotlib==3.6.2
 shapash==2.3.5
 streamlit-extras==0.2.7
-streamlit-lottie==0.0.5
\ No newline at end of file
+streamlit-lottie==0.0.5
+Pillow~=9.3.0
+sklearn~=0.0.post7
+autoviz~=0.1.730
\ No newline at end of file
Index: Classifier_Models/Classifier_model_builder_breast_cancer.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\r\nimport streamlit as st\r\nfrom sklearn.model_selection import train_test_split\r\nfrom sklearn.neighbors import KNeighborsClassifier\r\nfrom sklearn.naive_bayes import GaussianNB\r\nimport pandas as pd\r\nfrom sklearn.tree import DecisionTreeClassifier\r\nimport pickle\r\nfrom sklearn.metrics import confusion_matrix, accuracy_score\r\nimport matplotlib.pyplot as plt\r\nfrom sklearn.linear_model import LogisticRegression\r\nfrom sklearn.ensemble import RandomForestClassifier\r\nfrom sklearn.metrics import classification_report\r\n\r\nurl = \"res/dataset/breast-cancer.csv\"\r\nbc = pd.read_csv(url)\r\n\r\n# Ordinal feature encoding\r\ndf = bc.copy()\r\n\r\n# Separating X and y\r\nX = df.drop('diagnosis', axis=1)\r\nY = df['diagnosis']\r\n\r\n# Split the dataset into training and testing sets\r\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)\r\n\r\n\r\n\"\"\"________Naive Bayes Algorithm________\"\"\"\r\n# Train the Naive Bayes classifier\r\nnb_classifier = GaussianNB(var_smoothing=1e-9)\r\nnb_classifier.fit(X_train, y_train)\r\n# Predict using the Naive Bayes classifier\r\nnb_predictions = nb_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Naive Bayes classifier\r\nnb_cm = confusion_matrix(y_test, nb_predictions)\r\nnb_accuracy = accuracy_score(y_test, nb_predictions)\r\nnb_classifier_report = classification_report(y_test, nb_predictions)\r\nnb_classifier_report_dict = classification_report(y_test, nb_predictions, output_dict=True)\r\n\r\n\r\n\r\ndef plt_NB():\r\n\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(nb_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Naive Bayes Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for Naive Bayes classifier\r\n    plt.figure()\r\n    plt.imshow(nb_cm, interpolation='nearest', cmap=plt.cm.Reds)\r\n    plt.title('Confusion Matrix - Naive Bayes')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = nb_cm.max() / 2\r\n    for i, j in np.ndindex(nb_cm.shape):\r\n        plt.text(j, i, format(nb_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if nb_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\r\n\"\"\"________KNN Algorithm________\"\"\"\r\n# Train the K-Nearest Neighbors classifier\r\nknn_classifier = KNeighborsClassifier()\r\nknn_classifier.fit(X_train, y_train)\r\n# Predict using the K-Nearest Neighbors classifier\r\nknn_predictions = knn_classifier.predict(X_test)\r\nknn_cm = confusion_matrix(y_test, knn_predictions)\r\nknn_accuracy = accuracy_score(y_test, knn_predictions)\r\nknn_classifier_report = classification_report(y_test, knn_predictions)\r\nknn_classifier_report_dict = classification_report(y_test, knn_predictions, output_dict=True)\r\n\r\n\r\ndef plt_KNN():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(knn_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"K-Nearest Neighbors Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for Naive Bayes classifier\r\n    plt.figure()\r\n    plt.imshow(knn_cm, interpolation='nearest', cmap=plt.cm.Reds)\r\n    plt.title('Confusion Matrix - KNN')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = knn_cm.max() / 2\r\n    for i, j in np.ndindex(knn_cm.shape):\r\n        plt.text(j, i, format(knn_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if knn_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\r\n\"\"\"________Decision Tree________\"\"\"\r\n# Train the Decision Tree classifier\r\ndt_classifier = DecisionTreeClassifier(max_depth=None)\r\ndt_classifier.fit(X_train, y_train)\r\n# Predict using the Decision Tree classifier\r\ndt_predictions = dt_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Decision Tree classifier\r\ndt_cm = confusion_matrix(y_test, dt_predictions)\r\ndt_accuracy = accuracy_score(y_test, dt_predictions)\r\ndt_classifier_report = classification_report(y_test, dt_predictions)\r\ndt_classifier_report_dict = classification_report(y_test, dt_predictions, output_dict=True)\r\n\r\n\r\ndef plt_DT():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(dt_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Decision Tree Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for Naive Bayes classifier\r\n    plt.figure()\r\n    plt.imshow(dt_cm, interpolation='nearest', cmap=plt.cm.Reds)\r\n    plt.title('Confusion Matrix - Decision Tree')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = dt_cm.max() / 2\r\n    for i, j in np.ndindex(dt_cm.shape):\r\n        plt.text(j, i, format(dt_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if dt_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\r\n\"\"\"________Logistic Regression Algorithm________\"\"\"\r\n# Train the Logistic Regression classifier\r\nlr_classifier = LogisticRegression(max_iter=1000)\r\nlr_classifier.fit(X_train, y_train)\r\n# Predict using the Logistic Regression classifier\r\nlr_predictions = lr_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Logistic Regression classifier\r\nlr_cm = confusion_matrix(y_test, lr_predictions)\r\nlr_accuracy = accuracy_score(y_test, lr_predictions)\r\nlr_classifier_report = classification_report(y_test, lr_predictions)\r\nlr_classifier_report_dict = classification_report(y_test, lr_predictions, output_dict=True)\r\n\r\n\r\ndef plt_LR():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(lr_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Logistic Regression Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for classifier\r\n    plt.figure()\r\n    plt.imshow(lr_cm, interpolation='nearest', cmap=plt.cm.Reds)\r\n    plt.title('Confusion Matrix - Logistic Regression')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = lr_cm.max() / 2\r\n    for i, j in np.ndindex(lr_cm.shape):\r\n        plt.text(j, i, format(lr_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if lr_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\r\n\"\"\"________Random Forest Algorithm________\"\"\"\r\n# Train the Random Forest classifier\r\nrf_classifier = RandomForestClassifier(n_estimators=100)\r\nrf_classifier.fit(X_train, y_train)\r\n# Predict using the Random Forest classifier\r\nrf_predictions = rf_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Random Forest classifier\r\nrf_cm = confusion_matrix(y_test, rf_predictions)\r\nrf_accuracy = accuracy_score(y_test, rf_predictions)\r\nrf_classifier_report = classification_report(y_test, rf_predictions)\r\nrf_classifier_report_dict = classification_report(y_test, rf_predictions, output_dict=True)\r\n\r\n\r\ndef plt_RF():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(rf_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Random Forest Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for  classifier\r\n    plt.figure()\r\n    plt.imshow(rf_cm, interpolation='nearest', cmap=plt.cm.Reds)\r\n    plt.title('Confusion Matrix - Random Forest')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = rf_cm.max() / 2\r\n    for i, j in np.ndindex(rf_cm.shape):\r\n        plt.text(j, i, format(rf_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if rf_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\r\n# Compare the 5 models and select the best algorithm\r\nmodels = {\r\n    'Naive Bayes': nb_classifier_report,\r\n    'K-Nearest Neighbors (KNN)': knn_classifier_report,\r\n    'Decision Tree': dt_classifier_report,\r\n    'Logistic Regression': lr_classifier_report,\r\n    'Random Forest': rf_classifier_report\r\n}\r\nbest_model = max(models, key=models.get)\r\n\r\n# Saving the model\r\npickle.dump(nb_classifier, open('res/pickle/breast-cancer_disease_classifier_NB.pkl', 'wb'))\r\npickle.dump(knn_classifier, open('res/pickle/breast-cancer_disease_classifier_KNN.pkl', 'wb'))\r\npickle.dump(dt_classifier, open('res/pickle/breast-cancer_disease_classifier_DT.pkl', 'wb'))\r\npickle.dump(lr_classifier, open('res/pickle/breast-cancer_disease_classifier_LR.pkl', 'wb'))\r\npickle.dump(rf_classifier, open('res/pickle/breast-cancer_disease_classifier_RF.pkl', 'wb'))\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classifier_Models/Classifier_model_builder_breast_cancer.py b/Classifier_Models/Classifier_model_builder_breast_cancer.py
--- a/Classifier_Models/Classifier_model_builder_breast_cancer.py	(revision 36cd0071fafc951d5a33d944c2609159580f3a1e)
+++ b/Classifier_Models/Classifier_model_builder_breast_cancer.py	(date 1690644714388)
@@ -59,10 +59,10 @@
     plt.xlabel('Predicted Label')
     plt.ylabel('True Label')
 
-    thresh = nb_cm.max() / 2
-    for i, j in np.ndindex(nb_cm.shape):
-        plt.text(j, i, format(nb_cm[i, j], 'd'), ha='center', va='center',
-                 color='white' if nb_cm[i, j] > thresh else 'black')
+    thresh = dt_cm.max() / 2
+    for i, j in np.ndindex(dt_cm.shape):
+        plt.text(j, i, format(dt_cm[i, j], 'd'), ha='center', va='center',
+                 color='white' if dt_cm[i, j] > thresh else 'black')
 
     # Display the confusion matrix on Streamlit
     st.set_option('deprecation.showPyplotGlobalUse', False)
Index: Home.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import streamlit as st\r\nfrom res.multiapp import MultiApp\r\nfrom Apps import Hypertension_App, Stroke_App, Heart_Disease, Diabetes, Breast_Cancer  # import your app modules here\r\nfrom PIL import Image\r\nimport json\r\nfrom res import Header as hd\r\nfrom streamlit_lottie import  st_lottie\r\ndef load_lottiefile(filepath: str):\r\n    with open(filepath, \"r\") as f:\r\n        return json.load(f)\r\n\r\nlottie_coding = load_lottiefile(\"res/Logo_animation.json\")\r\n\r\napp = MultiApp()\r\nst.set_page_config(\r\n    page_title=\"Health Track\",\r\n    page_icon=Image.open(\"images/medical-team.png\"),\r\n    layout=\"wide\",\r\n\r\n)\r\n\r\nimage = Image.open(\"images/Health Track.png\")\r\nst.sidebar.image(image, use_column_width=True)\r\n\r\nst.markdown(\r\n    \"\"\"\r\n    <style>\r\n    .markdown-section {\r\n        margin-left: 10px;\r\n    }\r\n    </style>\r\n    \"\"\",\r\n    unsafe_allow_html=True\r\n)\r\n\r\ncol1, col2 = st.columns([1, 1], gap=\"small\")\r\nwith col1:\r\n    st_lottie(\r\n        lottie_coding,\r\n        speed=1,\r\n        reverse=False,\r\n        loop=True,\r\n        quality=\"medium\",\r\n        height=None,\r\n        width=None,\r\n        key=None,\r\n    )\r\n\r\n    col1.empty()\r\nwith col2:\r\n    col2.empty()\r\n    st.title(\"Health Track\")\r\n    st.markdown(\"\"\"\r\n\r\n    **Disease Detector App** - In the realm of healthcare, predicting diseases before they manifest can be a game-changer. \r\n    It can lead to early interventions, better management of health conditions, and improved patient outcomes. \r\n    To this end, we propose the development of a Disease Prediction Model using Machine Learning (ML) techniques.\r\n\r\n    This model will analyze various health parameters of an individual and predict the likelihood of them developing a specific disease.\r\n\r\n    _The parameters could include_ `age, gender, lifestyle habits, genetic factors, and existing health conditions` _, among others._\r\n    \"\"\")\r\n    st.write(\"**To Start**\")\r\n    st.write(\"Select your model below\uD83D\uDC47\")\r\n\r\nst.write(\"\")\r\nst.write(\"\")\r\nst.write(\"\")\r\nhd.colored_header(\r\n    label=\"Select your disease\",\r\n    color_name=\"violet-70\",\r\n)\r\n\r\n\r\n# Add all your application here\r\napp.add_app(\"Heart Disease Detector\", Heart_Disease.app)\r\napp.add_app(\"Hypertension Detector\", Hypertension_App.app)\r\napp.add_app(\"Stroke Detector\", Stroke_App.app)\r\napp.add_app(\"Diabetes Detector\", Diabetes.app)\r\napp.add_app(\"Breast Cancer Detector\", Breast_Cancer.app)\r\n# The main app\r\napp.run()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Home.py b/Home.py
--- a/Home.py	(revision 36cd0071fafc951d5a33d944c2609159580f3a1e)
+++ b/Home.py	(date 1690644869726)
@@ -4,11 +4,14 @@
 from PIL import Image
 import json
 from res import Header as hd
-from streamlit_lottie import  st_lottie
+from streamlit_lottie import st_lottie
+
+
 def load_lottiefile(filepath: str):
     with open(filepath, "r") as f:
         return json.load(f)
 
+
 lottie_coding = load_lottiefile("res/Logo_animation.json")
 
 app = MultiApp()
@@ -71,7 +74,6 @@
     color_name="violet-70",
 )
 
-
 # Add all your application here
 app.add_app("Heart Disease Detector", Heart_Disease.app)
 app.add_app("Hypertension Detector", Hypertension_App.app)
@@ -79,4 +81,4 @@
 app.add_app("Diabetes Detector", Diabetes.app)
 app.add_app("Breast Cancer Detector", Breast_Cancer.app)
 # The main app
-app.run()
\ No newline at end of file
+app.run()
Index: res/Dataset.py
===================================================================
diff --git a/res/Dataset.py b/res/Dataset.py
deleted file mode 100644
--- a/res/Dataset.py	(revision 36cd0071fafc951d5a33d944c2609159580f3a1e)
+++ /dev/null	(revision 36cd0071fafc951d5a33d944c2609159580f3a1e)
@@ -1,2 +0,0 @@
-import pandas as pd
-df = pd.read_csv("res")
\ No newline at end of file
Index: test_home.py
===================================================================
diff --git a/test_home.py b/test_home.py
deleted file mode 100644
--- a/test_home.py	(revision 36cd0071fafc951d5a33d944c2609159580f3a1e)
+++ /dev/null	(revision 36cd0071fafc951d5a33d944c2609159580f3a1e)
@@ -1,242 +0,0 @@
-import pickle
-import time
-
-import numpy as np
-import pandas as pd
-import streamlit as st
-
-from Classifier_Models import Classifier_model_builder_hypertension as cmb
-
-
-st.write("""
-    # Hypertension Blood Pressure Detector
-
-    This app predicts whether a person have any hypertension blood pressure or not
-
-    """)
-
-st.sidebar.header('User Input Features')
-# st.sidebar.markdown("""
-# [Import input CSV file](https://github.com/ChakraDeep8/Heart-Disease-Detector/tree/master/res)""")
-
-uploaded_file = st.sidebar.file_uploader("Upload your input CSV file", type=["csv"])
-
-if uploaded_file is not None:
-    input_df = pd.read_csv(uploaded_file)
-else:
-    def patient_details():
-        age = st.sidebar.slider('Age', 0, 98)
-        sex = st.sidebar.selectbox('Sex', ['Male', 'Female'])
-        chest_pain_type = st.sidebar.selectbox('Chest Pain Type',
-                                               ['Asymptomatic', 'Typical Angina', 'Atypical Angina', 'Non-anginal'])
-        resting_bp = st.sidebar.slider('Resting Blood Pressure', 94, 200)
-        serum_cholesterol = st.sidebar.slider('Serum Cholesterol', 126, 564)
-        fasting_bs = st.sidebar.selectbox('Fasting Blood Sugar',
-                                          ['Yes', 'No'])  # if the patient's fasting blood sugar > 120 mg/dl
-        resting_ecg = st.sidebar.selectbox('Resting ECG',
-                                           ['Normal', 'ST-T Wave Abnormality', 'Left Ventricular Hypertrophy'])
-        max_hr = st.sidebar.slider('Max Heart Rate', 71, 202)
-        exercise_angina = st.sidebar.selectbox('Exercise-Induced Angina', ['Yes', 'No'])
-        oldpeak = st.sidebar.slider('ST Depression Induced by Exercise Relative to Rest', 0.0, 6.2)
-        st_slope = st.sidebar.selectbox('ST Slope', ['Upsloping', 'Flat', 'Downsloping'])
-        major_vessels = st.sidebar.slider('Number of Major Vessels Colored by Fluoroscopy', 0, 4)
-        thalassemia = st.sidebar.slider('Thalassemia', 0, 3)
-
-        data = {'age': age,
-                'sex': sex,
-                'cp': chest_pain_type,
-                'trestbps': resting_bp,
-                'chol': serum_cholesterol,
-                'fbs': fasting_bs,
-                'restecg': resting_ecg,
-                'thalach': max_hr,
-                'exang': exercise_angina,
-                'oldpeak': oldpeak,
-                'slope': st_slope,
-                'ca': major_vessels,
-                'thal': thalassemia, }
-
-        features = pd.DataFrame(data, index=[0])
-        return features
-
-
-    input_df = patient_details()
-
-hypertension_disease_raw = pd.read_csv('res/hypertension_data.csv')
-hypertension = hypertension_disease_raw.drop(columns=['target'])
-df = pd.concat([input_df, hypertension], axis=0)
-
-# Encoding of ordinal features
-encode = ['sex', 'cp', 'fbs', 'restecg', 'exang', 'slope']
-for col in encode:
-    dummy = pd.get_dummies(df[col], prefix=col)
-    df = pd.concat([df, dummy], axis=1)
-    del df[col]
-df = df[:1]  # Selects only the first row (the user input data)
-df.loc[:, ~df.columns.duplicated()]
-
-if uploaded_file is not None:
-    st.write(df)
-else:
-    st.write('Awaiting CSV file to be uploaded. Currently using example input parameters (shown below).')
-    df = df.loc[:, ~df.columns.duplicated()]
-    st.write(df)
-
-# Load the classification models
-load_clf_NB = pickle.load(open('res/hypertension_disease_classifier_NB.pkl', 'rb'))
-load_clf_KNN = pickle.load(open('res/hypertension_disease_classifier_KNN.pkl', 'rb'))
-load_clf_DT = pickle.load(open('res/hypertension_disease_classifier_DT.pkl', 'rb'))
-load_clf_LR = pickle.load(open('res/hypertension_disease_classifier_LR.pkl', 'rb'))
-load_clf_RF = pickle.load(open('res/hypertension_disease_classifier_RF.pkl', 'rb'))
-
-# Apply models to make predictions
-prediction_NB = load_clf_NB.predict(df)
-prediction_proba_NB = load_clf_NB.predict_proba(df)
-prediction_KNN = load_clf_KNN.predict(df)
-prediction_proba_KNN = load_clf_KNN.predict_proba(df)
-prediction_DT = load_clf_DT.predict(df)
-prediction_proba_DT = load_clf_DT.predict_proba(df)
-prediction_LR = load_clf_LR.predict(df)
-prediction_proba_LR = load_clf_LR.predict_proba(df)
-prediction_RF = load_clf_RF.predict(df)
-prediction_proba_RF = load_clf_RF.predict_proba(df)
-
-
-def NB():
-    st.subheader('Naive Bayes Prediction')
-    NB_prediction = np.array([0, 1])
-    if NB_prediction[prediction_NB] == 1:
-        st.write("<p style='font-size:20px;color: orange'></p>", unsafe_allow_html=True)
-    else:
-        st.write("<p style='font-size:20px;color: green'><b>You are fine.</b></p>", unsafe_allow_html=True)
-    st.subheader('Naive Bayes Prediction Probability')
-    st.write(prediction_proba_NB)
-    cmb.plt_NB()
-
-
-
-def KNN():
-    st.subheader('K-Nearest Neighbour Prediction')
-    knn_prediction = {1: 'Yes', 0: 'NO'}
-    if knn_prediction[prediction_KNN] == 1:
-        st.write("<p style='font-size:20px;color: orange'><b>Heart Disease Detected.</b></p>",
-                 unsafe_allow_html=True)
-    else:
-        st.write("<p style='font-size:20px;color: green'><b>You are fine.</b></p>", unsafe_allow_html=True)
-    st.subheader('KNN Prediction Probability')
-    st.write(prediction_proba_KNN)
-    cmb.plt_KNN()
-
-
-def DT():
-    st.subheader('Decision Tree Prediction')
-    DT_prediction = np.array([0, 1])
-    if DT_prediction[prediction_DT] == 1:
-        st.write("<p style='font-size:20px; color: orange'><b>Heart Disease Detected.</b></p>",
-                 unsafe_allow_html=True)
-    else:
-        st.write("<p style='font-size:20px;color: green'><b>You are fine.</b></p>", unsafe_allow_html=True)
-    st.subheader('Decision Tree Prediction Probability')
-    st.write(prediction_proba_DT)
-    cmb.plt_DT()
-
-
-def LR():
-    st.subheader('Logistic Regression Prediction')
-    DT_prediction = np.array([0, 1])
-    if DT_prediction[prediction_DT] == 1:
-        st.write("<p style='font-size:20px; color: orange'><b>You have hypertension.</b></p>",
-                 unsafe_allow_html=True)
-    else:
-        st.write("<p style='font-size:20px;color: green'><b>You are fine.</b></p>", unsafe_allow_html=True)
-    st.subheader('Logistic Regression Probability')
-    st.write(prediction_proba_LR)
-    cmb.plt_LR()
-
-
-def RF():
-    st.subheader('Random Forest Prediction')
-    DT_prediction = np.array([0, 1])
-    if DT_prediction[prediction_DT] == 1:
-        st.write("<p style='font-size:20px; color: orange'><b>You have hypertension.</b></p>",
-                 unsafe_allow_html=True)
-    else:
-        st.write("<p style='font-size:20px;color: green'><b>You are fine.</b></p>", unsafe_allow_html=True)
-    st.subheader('Random Forest Probability')
-    st.write(prediction_proba_RF)
-    cmb.plt_LR()
-
-
-def predict_best_algorithm():
-    if cmb.best_model == 'Naive Bayes':
-        st.write("<p style='font-size:24px;'>Best Algorithm: Naive Bayes</p>", unsafe_allow_html=True)
-        NB()
-
-    elif cmb.best_model == 'K-Nearest Neighbors (KNN)':
-        st.write("<p style='font-size:24px;'>Best Algorithm: K-Nearest Neighbour</p>", unsafe_allow_html=True)
-        KNN()
-
-    elif cmb.best_model == 'Decision Tree':
-        st.write("<p style='font-size:24px;'>Best Algorithm: Decision Tree</p>", unsafe_allow_html=True)
-        DT()
-
-    elif cmb.best_model == 'Logistic Regression':
-        st.write("<p style='font-size:24px;'>Best Algorithm: Logistic Regression</p>", unsafe_allow_html=True)
-        LR()
-
-    elif cmb.best_model == 'Random Forest':
-        st.write("<p style='font-size:24px;'>Best Algorithm: Random Forest</p>", unsafe_allow_html=True)
-        RF()
-    else:
-        st.write("<p style='font-size:20px;color: green'><b>You are fine.</b></p>", unsafe_allow_html=True)
-
-
-# Displays the user input features
-with st.expander("Prediction Results"):
-    # Display the input dataframe
-    st.write("Your input values are shown below:")
-    st.dataframe(input_df)
-    # Call the predict_best_algorithm() function
-    predict_best_algorithm()
-
-# Create a multiselect for all the plot options
-selected_plots = st.multiselect("Select plots to display",
-                                ["Naive Bayes", "K-Nearest Neighbors", "Decision Tree", "Logistic Regression",
-                                 "Random Forest"])
-
-# Check the selected plots and call the corresponding plot functions
-
-placeholder = st.empty()
-
-# Check the selected plots and call the corresponding plot functions
-if "Naive Bayes" in selected_plots:
-    with st.spinner("Generating Naive Bayes...."):
-        cmb.plt_NB()
-        time.sleep(1)
-
-if "K-Nearest Neighbors" in selected_plots:
-    with st.spinner("Generating KNN...."):
-        cmb.plt_KNN()
-        time.sleep(1)
-
-if "Decision Tree" in selected_plots:
-    with st.spinner("Generating Decision Tree...."):
-        cmb.plt_DT()
-        time.sleep(1)
-
-if "Logistic Regression" in selected_plots:
-    with st.spinner("Generating Logistic Regression...."):
-        cmb.plt_LR()
-        time.sleep(1)
-
-if "Random Forest" in selected_plots:
-    with st.spinner("Generating Random Forest...."):
-        cmb.plt_RF()
-        time.sleep(1)
-
-# Remove the placeholder to display the list options
-placeholder.empty()
-
-
-
-
Index: res/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pandas as pd\r\n\r\ndf = pd.read_csv(\"res/stroke_data.csv\")\r\n\r\ndf['sex'].replace({1: \"Male\",0: \"Female\"}, inplace=True)\r\ndf['hypertension'].replace({0: \"No\",1: \"Yes\"}, inplace=True)\r\ndf['heart_disease'].replace({0: \"No\",1: \"Yes\"}, inplace=True)\r\ndf['ever_married'].replace({0: \"No\",1: \"Yes\"}, inplace=True)\r\ndf['work_type'].replace({0: \"Never Worked\",1: \"Children\",2:\"Goverment Job\",3:\"Self-Employed\",4:\"Private\"}, inplace=True)\r\ndf['Residence_type'].replace({0: \"Rural\",1: \"Urban\"}, inplace=True)\r\ndf['smoking_status'].replace({0: \"No\",1: \"Yes\"}, inplace=True)\r\n\r\ndf.to_csv(\"C:\\Projects\\GUI\\stroke_data.csv\")
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/res/main.py b/res/main.py
--- a/res/main.py	(revision 36cd0071fafc951d5a33d944c2609159580f3a1e)
+++ b/res/main.py	(date 1690644714409)
@@ -1,13 +1,5 @@
 import pandas as pd
 
-df = pd.read_csv("res/stroke_data.csv")
-
-df['sex'].replace({1: "Male",0: "Female"}, inplace=True)
-df['hypertension'].replace({0: "No",1: "Yes"}, inplace=True)
-df['heart_disease'].replace({0: "No",1: "Yes"}, inplace=True)
-df['ever_married'].replace({0: "No",1: "Yes"}, inplace=True)
-df['work_type'].replace({0: "Never Worked",1: "Children",2:"Goverment Job",3:"Self-Employed",4:"Private"}, inplace=True)
-df['Residence_type'].replace({0: "Rural",1: "Urban"}, inplace=True)
-df['smoking_status'].replace({0: "No",1: "Yes"}, inplace=True)
-
-df.to_csv("C:\Projects\GUI\stroke_data.csv")
\ No newline at end of file
+df = pd.read_csv("../res/Datasets/CKD_Preprocessed.csv")
+print(df['age'].max())
+print(df['age'].min())
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"3bceba5c-1534-412c-a912-a524c5b07970\" name=\"Changes\" comment=\"Update Apps and Classifier directories&#10;Add Kidney_App.py module\">\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/diabetes_disease_classifier_DT.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/diabetes_disease_classifier_KNN.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/diabetes_disease_classifier_LR.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/diabetes_disease_classifier_NB.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/diabetes_disease_classifier_RF.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/heart_disease_classifier_DT.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/heart_disease_classifier_KNN.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/heart_disease_classifier_LR.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/heart_disease_classifier_NB.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/heart_disease_classifier_RF.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/hypertension_disease_classifier_DT.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/hypertension_disease_classifier_KNN.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/hypertension_disease_classifier_LR.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/hypertension_disease_classifier_NB.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/hypertension_disease_classifier_RF.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/kidney_disease_classifier_DT.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/kidney_disease_classifier_KNN.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/kidney_disease_classifier_LR.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/kidney_disease_classifier_NB.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/kidney_disease_classifier_RF.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/stroke_disease_classifier_DT.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/stroke_disease_classifier_KNN.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/stroke_disease_classifier_LR.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/stroke_disease_classifier_NB.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/stroke_disease_classifier_RF.pkl\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/DiseasePrediction.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/DiseasePrediction.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_08_25_pm__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_08_25_pm__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_08_26_pm__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_08_26_pm__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_09_03_pm__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_09_03_pm__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_10_04_pm__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_10_04_pm__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_26-07-2023_01_55_am__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_26-07-2023_01_55_am__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_04_22_pm__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_04_22_pm__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_05_36_pm__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_05_36_pm__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_05_50_pm__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_05_50_pm__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_06_14_pm__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_06_14_pm__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Home.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Home.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/res/breast-cancer_disease_classifier_RF.pkl\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/test_home.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/test_home.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"PUSH_AUTO_UPDATE\" value=\"true\" />\r\n    <option name=\"PUSH_TAGS\">\r\n      <GitPushTagMode>\r\n        <option name=\"argument\" value=\"--follow-tags\" />\r\n        <option name=\"title\" value=\"Current Branch\" />\r\n      </GitPushTagMode>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2SvsXvopiBfvBLkDHiYmxZWjp9S\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;deletionFromPopupRequiresConfirmation&quot;: &quot;false&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/deep/PycharmProjects/DiseasePrediction&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  },\r\n  &quot;keyToStringList&quot;: {\r\n    &quot;ChangesTree.GroupingKeys&quot;: [\r\n    ]\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Shubham\\PycharmProjects\\Hypertension_Stroke_DiseasePrediction\\res\\dataset\" />\r\n      <recent name=\"C:\\Users\\Shubham\\PycharmProjects\\Hypertension_Stroke_DiseasePrediction\\Apps\" />\r\n      <recent name=\"C:\\Users\\Shubham\\PycharmProjects\\Hypertension_Stroke_DiseasePrediction\\Classifier_Models\" />\r\n      <recent name=\"C:\\Users\\Shubham\\PycharmProjects\\Hypertension_Stroke_DiseasePrediction\\res\" />\r\n      <recent name=\"C:\\Users\\deep\\PycharmProjects\\DiseasePrediction\\res\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration default=\"true\" type=\"PythonConfigurationType\" factoryName=\"Python\">\r\n      <module name=\"DiseasePrediction\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"true\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"3bceba5c-1534-412c-a912-a524c5b07970\" name=\"Changes\" comment=\"\" />\r\n      <created>1690038431660</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1690038431660</updated>\r\n      <workItem from=\"1690091793345\" duration=\"1402000\" />\r\n      <workItem from=\"1690097267704\" duration=\"3588000\" />\r\n      <workItem from=\"1690110315042\" duration=\"1241000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"First\">\r\n      <created>1690038606065</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690038606065</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Pikcle\">\r\n      <created>1690041485079</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690041485079</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Pikcle\">\r\n      <created>1690041525525</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690041525525</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Pikcle_stroke\">\r\n      <created>1690042216929</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690042216929</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Pikcle_stroke\">\r\n      <created>1690043927950</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690043927950</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Pikcle_stroke\">\r\n      <created>1690044218297</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690044218297</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"First\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690092549440</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690092549440</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"First\">\r\n      <created>1690109213469</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690109213469</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Updated stoke dataset\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690110465164</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690110465164</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Stroke webpage\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690110489903</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690110489903</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"First\">\r\n      <created>1690112644765</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690112644765</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"KNN_pickle\">\r\n      <created>1690112868079</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690112868079</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"stroke_knn_pickle\">\r\n      <created>1690112928425</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690112928425</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Second update\">\r\n      <created>1690112968877</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690112968877</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Third update\">\r\n      <created>1690128242073</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690128242073</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Some Changes\">\r\n      <created>1690129410403</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690129410403</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"implement heart disease\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690131397731</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690131397731</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"implement heart disease\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690131482996</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690131482996</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"Web page buildup\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690191289621</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690191289621</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"added config.toml and some changes in Home.py\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690205462488</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690205462488</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Major Update!!&#10;1. Change in Web page UI (Make it more user friendly)&#10;2. Add Multiselector for all plots&#10;3. Changes in Classifier files&#10;4. Add Algorithms probability\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690229274816</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690229274816</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"CKD_Preprocessed file upload\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690284715712</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690284715712</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"Kidney module added\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690289818269</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690289818269</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"med update\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690291484074</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690291484074</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"Update 3.0\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690294229361</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690294229361</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"Added Kidney.py\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690298893277</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690298893277</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"Kidney_app&#10;np.array({0,1})\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690299615879</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690299615879</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"Add logo in sidebar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690303065920</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690303065920</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"Add Diabetes Model\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690309875149</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690309875149</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00030\" summary=\"Change in multiapp.py&#10;Changes in README.md\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690310227627</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690310227627</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00031\" summary=\"Add terminal runner file\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690314340170</created>\r\n      <option name=\"number\" value=\"00031\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00031\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690314340170</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00032\" summary=\"requirements.txt\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690316691030</created>\r\n      <option name=\"number\" value=\"00032\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00032\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690316691030</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00033\" summary=\"matplot update\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690317012596</created>\r\n      <option name=\"number\" value=\"00033\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00033\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690317012596</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00034\" summary=\"panda\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690317265475</created>\r\n      <option name=\"number\" value=\"00034\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00034\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690317265475</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00035\" summary=\"med image\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690317613436</created>\r\n      <option name=\"number\" value=\"00035\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00035\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690317613436</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00036\" summary=\"med imd\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690317701347</created>\r\n      <option name=\"number\" value=\"00036\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00036\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690317701347</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00037\" summary=\"Resolve Heart Disease Issue\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690386873571</created>\r\n      <option name=\"number\" value=\"00037\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00037\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690386873571</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00038\" summary=\"Lol\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690467809733</created>\r\n      <option name=\"number\" value=\"00038\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00038\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690467809733</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00039\" summary=\"Fix heart file error\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690477364100</created>\r\n      <option name=\"number\" value=\"00039\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00039\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690477364100</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00040\" summary=\"Update res directory\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690644276680</created>\r\n      <option name=\"number\" value=\"00040\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00040\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690644276681</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00041\" summary=\"Update Apps and Classifier directories&#10;Add Kidney_App.py module\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690644398218</created>\r\n      <option name=\"number\" value=\"00041\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00041\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690644398218</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"42\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <option name=\"CLEAR_INITIAL_COMMIT_MESSAGE\" value=\"true\" />\r\n    <MESSAGE value=\"Some Changes\" />\r\n    <MESSAGE value=\"implement heart disease\" />\r\n    <MESSAGE value=\"Web page buildup\" />\r\n    <MESSAGE value=\"added config.toml and some changes in Home.py\" />\r\n    <MESSAGE value=\"Major Update!!&#10;1. Change in Web page UI (Make it more user friendly)&#10;2. Add Multiselector for all plots&#10;3. Changes in Classifier files&#10;4. Add Algorithms probability\" />\r\n    <MESSAGE value=\"CKD_Preprocessed file upload\" />\r\n    <MESSAGE value=\"Kidney module added\" />\r\n    <MESSAGE value=\"med update\" />\r\n    <MESSAGE value=\"Update 3.0\" />\r\n    <MESSAGE value=\"Added Kidney.py\" />\r\n    <MESSAGE value=\"Kidney_app&#10;np.array({0,1})\" />\r\n    <MESSAGE value=\"Add logo in sidebar\" />\r\n    <MESSAGE value=\"Add Diabetes Model\" />\r\n    <MESSAGE value=\"Change in multiapp.py&#10;Changes in README.md\" />\r\n    <MESSAGE value=\"Add terminal runner file\" />\r\n    <MESSAGE value=\"requirements.txt\" />\r\n    <MESSAGE value=\"matplot update\" />\r\n    <MESSAGE value=\"panda\" />\r\n    <MESSAGE value=\"med image\" />\r\n    <MESSAGE value=\"med imd\" />\r\n    <MESSAGE value=\"Resolve Heart Disease Issue\" />\r\n    <MESSAGE value=\"Lol\" />\r\n    <MESSAGE value=\"Fix heart file error\" />\r\n    <MESSAGE value=\"Update res directory\" />\r\n    <MESSAGE value=\"Update Apps and Classifier directories&#10;Add Kidney_App.py module\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Update Apps and Classifier directories&#10;Add Kidney_App.py module\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 36cd0071fafc951d5a33d944c2609159580f3a1e)
+++ b/.idea/workspace.xml	(date 1690644749177)
@@ -5,45 +5,12 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="3bceba5c-1534-412c-a912-a524c5b07970" name="Changes" comment="Update Apps and Classifier directories&#10;Add Kidney_App.py module">
-      <change afterPath="$PROJECT_DIR$/res/pickle/diabetes_disease_classifier_DT.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/diabetes_disease_classifier_KNN.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/diabetes_disease_classifier_LR.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/diabetes_disease_classifier_NB.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/diabetes_disease_classifier_RF.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/heart_disease_classifier_DT.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/heart_disease_classifier_KNN.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/heart_disease_classifier_LR.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/heart_disease_classifier_NB.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/heart_disease_classifier_RF.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/hypertension_disease_classifier_DT.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/hypertension_disease_classifier_KNN.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/hypertension_disease_classifier_LR.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/hypertension_disease_classifier_NB.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/hypertension_disease_classifier_RF.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/kidney_disease_classifier_DT.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/kidney_disease_classifier_KNN.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/kidney_disease_classifier_LR.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/kidney_disease_classifier_NB.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/kidney_disease_classifier_RF.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/stroke_disease_classifier_DT.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/stroke_disease_classifier_KNN.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/stroke_disease_classifier_LR.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/stroke_disease_classifier_NB.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/stroke_disease_classifier_RF.pkl" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/DiseasePrediction.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/DiseasePrediction.iml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_08_25_pm__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_08_25_pm__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_08_26_pm__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_08_26_pm__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_09_03_pm__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_09_03_pm__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_10_04_pm__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_10_04_pm__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_26-07-2023_01_55_am__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_26-07-2023_01_55_am__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_04_22_pm__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_04_22_pm__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_05_36_pm__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_05_36_pm__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_05_50_pm__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_05_50_pm__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_06_14_pm__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_06_14_pm__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Home.py" beforeDir="false" afterPath="$PROJECT_DIR$/Home.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Shapash/Shapash_Hypertension.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Classifier_Models/Classifier_model_builder_breast_cancer.py" beforeDir="false" afterPath="$PROJECT_DIR$/Classifier_Models/Classifier_model_builder_breast_cancer.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Shapash/Shapash_Heart.py" beforeDir="false" afterPath="$PROJECT_DIR$/Shapash/Shapash_Heart.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/requirements.txt" beforeDir="false" afterPath="$PROJECT_DIR$/requirements.txt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/res/breast-cancer_disease_classifier_RF.pkl" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/test_home.py" beforeDir="false" afterPath="$PROJECT_DIR$/test_home.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/res/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/res/main.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -58,6 +25,19 @@
     </option>
   </component>
   <component name="Git.Settings">
+    <favorite-branches>
+      <branch-storage>
+        <map>
+          <entry type="REMOTE">
+            <value>
+              <list>
+                <branch-info repo="$PROJECT_DIR$" source="main/master" />
+              </list>
+            </value>
+          </entry>
+        </map>
+      </branch-storage>
+    </favorite-branches>
     <option name="PUSH_AUTO_UPDATE" value="true" />
     <option name="PUSH_TAGS">
       <GitPushTagMode>
Index: Shapash/Shapash_Hypertension.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Shapash/Shapash_Hypertension.py b/Shapash/Shapash_Hypertension.py
new file mode 100644
--- /dev/null	(date 1690644714398)
+++ b/Shapash/Shapash_Hypertension.py	(date 1690644714398)
@@ -0,0 +1,11 @@
+import matplotlib
+import streamlit as st
+import pandas as pd
+from autoviz.AutoViz_Class import AutoViz_Class
+
+url = "../res/hypertension_data.csv"
+df = pd.read_csv(url)
+AV = AutoViz_Class()
+filename = url
+
+dft = AV.bar_plot(filename)
