Index: res/Dataset.py
===================================================================
diff --git a/res/Dataset.py b/res/Dataset.py
deleted file mode 100644
--- a/res/Dataset.py	(revision 82ba8471cf937849bb955a85b7d3a15198f76c1a)
+++ /dev/null	(revision 82ba8471cf937849bb955a85b7d3a15198f76c1a)
@@ -1,2 +0,0 @@
-import pandas as pd
-df = pd.read_csv("res")
\ No newline at end of file
Index: res/main.py
===================================================================
diff --git a/res/main.py b/res/main.py
deleted file mode 100644
--- a/res/main.py	(revision 82ba8471cf937849bb955a85b7d3a15198f76c1a)
+++ /dev/null	(revision 82ba8471cf937849bb955a85b7d3a15198f76c1a)
@@ -1,13 +0,0 @@
-import pandas as pd
-
-df = pd.read_csv("res/stroke_data.csv")
-
-df['sex'].replace({1: "Male",0: "Female"}, inplace=True)
-df['hypertension'].replace({0: "No",1: "Yes"}, inplace=True)
-df['heart_disease'].replace({0: "No",1: "Yes"}, inplace=True)
-df['ever_married'].replace({0: "No",1: "Yes"}, inplace=True)
-df['work_type'].replace({0: "Never Worked",1: "Children",2:"Goverment Job",3:"Self-Employed",4:"Private"}, inplace=True)
-df['Residence_type'].replace({0: "Rural",1: "Urban"}, inplace=True)
-df['smoking_status'].replace({0: "No",1: "Yes"}, inplace=True)
-
-df.to_csv("C:\Projects\GUI\stroke_data.csv")
\ No newline at end of file
Index: Shapash/Shapash_Heart.py
===================================================================
diff --git a/Shapash/Shapash_Heart.py b/Shapash/Shapash_Heart.py
deleted file mode 100644
--- a/Shapash/Shapash_Heart.py	(revision 82ba8471cf937849bb955a85b7d3a15198f76c1a)
+++ /dev/null	(revision 82ba8471cf937849bb955a85b7d3a15198f76c1a)
@@ -1,32 +0,0 @@
-from shapash.explainer.smart_explainer import SmartExplainer
-from sklearn.ensemble import RandomForestRegressor
-import pandas as pd
-from sklearn.model_selection import train_test_split
-
-url = "C:\\Users\\deep\\PycharmProjects\\DiseasePrediction\\res\\heart.csv"
-heart = pd.read_csv(url)
-
-# Ordinal feature encoding
-df = heart.copy()
-encode = ['Sex', 'ChestPainType', 'RestingECG', 'ExerciseAngina', 'ST_Slope']
-
-for col in encode:
-    dummy = pd.get_dummies(df[col], prefix=col)
-    df = pd.concat([df, dummy], axis=1)
-    del df[col]
-    del dummy
-
-# Separating X and y
-X = df.drop('HeartDisease', axis=1)
-Y = df['HeartDisease']
-
-# Split the dataset into training and testing sets
-X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)
-regressor = RandomForestRegressor(n_estimators=200).fit(X_train, y_train)
-
-xpl = SmartExplainer(model=regressor)
-xpl.compile(
-    x=X_test,
-
-)
-app = xpl.run_app(title_story='Tips Dataset')
Index: test_home.py
===================================================================
diff --git a/test_home.py b/test_home.py
deleted file mode 100644
--- a/test_home.py	(revision 82ba8471cf937849bb955a85b7d3a15198f76c1a)
+++ /dev/null	(revision 82ba8471cf937849bb955a85b7d3a15198f76c1a)
@@ -1,242 +0,0 @@
-import pickle
-import time
-
-import numpy as np
-import pandas as pd
-import streamlit as st
-
-from Classifier_Models import Classifier_model_builder_hypertension as cmb
-
-
-st.write("""
-    # Hypertension Blood Pressure Detector
-
-    This app predicts whether a person have any hypertension blood pressure or not
-
-    """)
-
-st.sidebar.header('User Input Features')
-# st.sidebar.markdown("""
-# [Import input CSV file](https://github.com/ChakraDeep8/Heart-Disease-Detector/tree/master/res)""")
-
-uploaded_file = st.sidebar.file_uploader("Upload your input CSV file", type=["csv"])
-
-if uploaded_file is not None:
-    input_df = pd.read_csv(uploaded_file)
-else:
-    def patient_details():
-        age = st.sidebar.slider('Age', 0, 98)
-        sex = st.sidebar.selectbox('Sex', ['Male', 'Female'])
-        chest_pain_type = st.sidebar.selectbox('Chest Pain Type',
-                                               ['Asymptomatic', 'Typical Angina', 'Atypical Angina', 'Non-anginal'])
-        resting_bp = st.sidebar.slider('Resting Blood Pressure', 94, 200)
-        serum_cholesterol = st.sidebar.slider('Serum Cholesterol', 126, 564)
-        fasting_bs = st.sidebar.selectbox('Fasting Blood Sugar',
-                                          ['Yes', 'No'])  # if the patient's fasting blood sugar > 120 mg/dl
-        resting_ecg = st.sidebar.selectbox('Resting ECG',
-                                           ['Normal', 'ST-T Wave Abnormality', 'Left Ventricular Hypertrophy'])
-        max_hr = st.sidebar.slider('Max Heart Rate', 71, 202)
-        exercise_angina = st.sidebar.selectbox('Exercise-Induced Angina', ['Yes', 'No'])
-        oldpeak = st.sidebar.slider('ST Depression Induced by Exercise Relative to Rest', 0.0, 6.2)
-        st_slope = st.sidebar.selectbox('ST Slope', ['Upsloping', 'Flat', 'Downsloping'])
-        major_vessels = st.sidebar.slider('Number of Major Vessels Colored by Fluoroscopy', 0, 4)
-        thalassemia = st.sidebar.slider('Thalassemia', 0, 3)
-
-        data = {'age': age,
-                'sex': sex,
-                'cp': chest_pain_type,
-                'trestbps': resting_bp,
-                'chol': serum_cholesterol,
-                'fbs': fasting_bs,
-                'restecg': resting_ecg,
-                'thalach': max_hr,
-                'exang': exercise_angina,
-                'oldpeak': oldpeak,
-                'slope': st_slope,
-                'ca': major_vessels,
-                'thal': thalassemia, }
-
-        features = pd.DataFrame(data, index=[0])
-        return features
-
-
-    input_df = patient_details()
-
-hypertension_disease_raw = pd.read_csv('res/hypertension_data.csv')
-hypertension = hypertension_disease_raw.drop(columns=['target'])
-df = pd.concat([input_df, hypertension], axis=0)
-
-# Encoding of ordinal features
-encode = ['sex', 'cp', 'fbs', 'restecg', 'exang', 'slope']
-for col in encode:
-    dummy = pd.get_dummies(df[col], prefix=col)
-    df = pd.concat([df, dummy], axis=1)
-    del df[col]
-df = df[:1]  # Selects only the first row (the user input data)
-df.loc[:, ~df.columns.duplicated()]
-
-if uploaded_file is not None:
-    st.write(df)
-else:
-    st.write('Awaiting CSV file to be uploaded. Currently using example input parameters (shown below).')
-    df = df.loc[:, ~df.columns.duplicated()]
-    st.write(df)
-
-# Load the classification models
-load_clf_NB = pickle.load(open('res/hypertension_disease_classifier_NB.pkl', 'rb'))
-load_clf_KNN = pickle.load(open('res/hypertension_disease_classifier_KNN.pkl', 'rb'))
-load_clf_DT = pickle.load(open('res/hypertension_disease_classifier_DT.pkl', 'rb'))
-load_clf_LR = pickle.load(open('res/hypertension_disease_classifier_LR.pkl', 'rb'))
-load_clf_RF = pickle.load(open('res/hypertension_disease_classifier_RF.pkl', 'rb'))
-
-# Apply models to make predictions
-prediction_NB = load_clf_NB.predict(df)
-prediction_proba_NB = load_clf_NB.predict_proba(df)
-prediction_KNN = load_clf_KNN.predict(df)
-prediction_proba_KNN = load_clf_KNN.predict_proba(df)
-prediction_DT = load_clf_DT.predict(df)
-prediction_proba_DT = load_clf_DT.predict_proba(df)
-prediction_LR = load_clf_LR.predict(df)
-prediction_proba_LR = load_clf_LR.predict_proba(df)
-prediction_RF = load_clf_RF.predict(df)
-prediction_proba_RF = load_clf_RF.predict_proba(df)
-
-
-def NB():
-    st.subheader('Naive Bayes Prediction')
-    NB_prediction = np.array([0, 1])
-    if NB_prediction[prediction_NB] == 1:
-        st.write("<p style='font-size:20px;color: orange'></p>", unsafe_allow_html=True)
-    else:
-        st.write("<p style='font-size:20px;color: green'><b>You are fine.</b></p>", unsafe_allow_html=True)
-    st.subheader('Naive Bayes Prediction Probability')
-    st.write(prediction_proba_NB)
-    cmb.plt_NB()
-
-
-
-def KNN():
-    st.subheader('K-Nearest Neighbour Prediction')
-    knn_prediction = {1: 'Yes', 0: 'NO'}
-    if knn_prediction[prediction_KNN] == 1:
-        st.write("<p style='font-size:20px;color: orange'><b>Heart Disease Detected.</b></p>",
-                 unsafe_allow_html=True)
-    else:
-        st.write("<p style='font-size:20px;color: green'><b>You are fine.</b></p>", unsafe_allow_html=True)
-    st.subheader('KNN Prediction Probability')
-    st.write(prediction_proba_KNN)
-    cmb.plt_KNN()
-
-
-def DT():
-    st.subheader('Decision Tree Prediction')
-    DT_prediction = np.array([0, 1])
-    if DT_prediction[prediction_DT] == 1:
-        st.write("<p style='font-size:20px; color: orange'><b>Heart Disease Detected.</b></p>",
-                 unsafe_allow_html=True)
-    else:
-        st.write("<p style='font-size:20px;color: green'><b>You are fine.</b></p>", unsafe_allow_html=True)
-    st.subheader('Decision Tree Prediction Probability')
-    st.write(prediction_proba_DT)
-    cmb.plt_DT()
-
-
-def LR():
-    st.subheader('Logistic Regression Prediction')
-    DT_prediction = np.array([0, 1])
-    if DT_prediction[prediction_DT] == 1:
-        st.write("<p style='font-size:20px; color: orange'><b>You have hypertension.</b></p>",
-                 unsafe_allow_html=True)
-    else:
-        st.write("<p style='font-size:20px;color: green'><b>You are fine.</b></p>", unsafe_allow_html=True)
-    st.subheader('Logistic Regression Probability')
-    st.write(prediction_proba_LR)
-    cmb.plt_LR()
-
-
-def RF():
-    st.subheader('Random Forest Prediction')
-    DT_prediction = np.array([0, 1])
-    if DT_prediction[prediction_DT] == 1:
-        st.write("<p style='font-size:20px; color: orange'><b>You have hypertension.</b></p>",
-                 unsafe_allow_html=True)
-    else:
-        st.write("<p style='font-size:20px;color: green'><b>You are fine.</b></p>", unsafe_allow_html=True)
-    st.subheader('Random Forest Probability')
-    st.write(prediction_proba_RF)
-    cmb.plt_LR()
-
-
-def predict_best_algorithm():
-    if cmb.best_model == 'Naive Bayes':
-        st.write("<p style='font-size:24px;'>Best Algorithm: Naive Bayes</p>", unsafe_allow_html=True)
-        NB()
-
-    elif cmb.best_model == 'K-Nearest Neighbors (KNN)':
-        st.write("<p style='font-size:24px;'>Best Algorithm: K-Nearest Neighbour</p>", unsafe_allow_html=True)
-        KNN()
-
-    elif cmb.best_model == 'Decision Tree':
-        st.write("<p style='font-size:24px;'>Best Algorithm: Decision Tree</p>", unsafe_allow_html=True)
-        DT()
-
-    elif cmb.best_model == 'Logistic Regression':
-        st.write("<p style='font-size:24px;'>Best Algorithm: Logistic Regression</p>", unsafe_allow_html=True)
-        LR()
-
-    elif cmb.best_model == 'Random Forest':
-        st.write("<p style='font-size:24px;'>Best Algorithm: Random Forest</p>", unsafe_allow_html=True)
-        RF()
-    else:
-        st.write("<p style='font-size:20px;color: green'><b>You are fine.</b></p>", unsafe_allow_html=True)
-
-
-# Displays the user input features
-with st.expander("Prediction Results"):
-    # Display the input dataframe
-    st.write("Your input values are shown below:")
-    st.dataframe(input_df)
-    # Call the predict_best_algorithm() function
-    predict_best_algorithm()
-
-# Create a multiselect for all the plot options
-selected_plots = st.multiselect("Select plots to display",
-                                ["Naive Bayes", "K-Nearest Neighbors", "Decision Tree", "Logistic Regression",
-                                 "Random Forest"])
-
-# Check the selected plots and call the corresponding plot functions
-
-placeholder = st.empty()
-
-# Check the selected plots and call the corresponding plot functions
-if "Naive Bayes" in selected_plots:
-    with st.spinner("Generating Naive Bayes...."):
-        cmb.plt_NB()
-        time.sleep(1)
-
-if "K-Nearest Neighbors" in selected_plots:
-    with st.spinner("Generating KNN...."):
-        cmb.plt_KNN()
-        time.sleep(1)
-
-if "Decision Tree" in selected_plots:
-    with st.spinner("Generating Decision Tree...."):
-        cmb.plt_DT()
-        time.sleep(1)
-
-if "Logistic Regression" in selected_plots:
-    with st.spinner("Generating Logistic Regression...."):
-        cmb.plt_LR()
-        time.sleep(1)
-
-if "Random Forest" in selected_plots:
-    with st.spinner("Generating Random Forest...."):
-        cmb.plt_RF()
-        time.sleep(1)
-
-# Remove the placeholder to display the list options
-placeholder.empty()
-
-
-
-
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"3bceba5c-1534-412c-a912-a524c5b07970\" name=\"Changes\" comment=\"Update Apps and Classifier directories&#10;Add Kidney_App.py module\">\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/diabetes_disease_classifier_DT.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/diabetes_disease_classifier_KNN.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/diabetes_disease_classifier_LR.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/diabetes_disease_classifier_NB.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/diabetes_disease_classifier_RF.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/heart_disease_classifier_DT.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/heart_disease_classifier_KNN.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/heart_disease_classifier_LR.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/heart_disease_classifier_NB.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/heart_disease_classifier_RF.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/hypertension_disease_classifier_DT.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/hypertension_disease_classifier_KNN.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/hypertension_disease_classifier_LR.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/hypertension_disease_classifier_NB.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/hypertension_disease_classifier_RF.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/kidney_disease_classifier_DT.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/kidney_disease_classifier_KNN.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/kidney_disease_classifier_LR.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/kidney_disease_classifier_NB.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/kidney_disease_classifier_RF.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/stroke_disease_classifier_DT.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/stroke_disease_classifier_KNN.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/stroke_disease_classifier_LR.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/stroke_disease_classifier_NB.pkl\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res/pickle/stroke_disease_classifier_RF.pkl\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/DiseasePrediction.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/DiseasePrediction.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_08_25_pm__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_08_25_pm__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_08_26_pm__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_08_26_pm__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_09_03_pm__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_09_03_pm__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_10_04_pm__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_10_04_pm__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_26-07-2023_01_55_am__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_26-07-2023_01_55_am__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_04_22_pm__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_04_22_pm__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_05_36_pm__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_05_36_pm__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_05_50_pm__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_05_50_pm__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_06_14_pm__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_06_14_pm__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Home.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Home.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/res/breast-cancer_disease_classifier_RF.pkl\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/test_home.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/test_home.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"PUSH_AUTO_UPDATE\" value=\"true\" />\r\n    <option name=\"PUSH_TAGS\">\r\n      <GitPushTagMode>\r\n        <option name=\"argument\" value=\"--follow-tags\" />\r\n        <option name=\"title\" value=\"Current Branch\" />\r\n      </GitPushTagMode>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2SvsXvopiBfvBLkDHiYmxZWjp9S\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;deletionFromPopupRequiresConfirmation&quot;: &quot;false&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/deep/PycharmProjects/DiseasePrediction&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  },\r\n  &quot;keyToStringList&quot;: {\r\n    &quot;ChangesTree.GroupingKeys&quot;: [\r\n    ]\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Shubham\\PycharmProjects\\Hypertension_Stroke_DiseasePrediction\\res\\dataset\" />\r\n      <recent name=\"C:\\Users\\Shubham\\PycharmProjects\\Hypertension_Stroke_DiseasePrediction\\Apps\" />\r\n      <recent name=\"C:\\Users\\Shubham\\PycharmProjects\\Hypertension_Stroke_DiseasePrediction\\Classifier_Models\" />\r\n      <recent name=\"C:\\Users\\Shubham\\PycharmProjects\\Hypertension_Stroke_DiseasePrediction\\res\" />\r\n      <recent name=\"C:\\Users\\deep\\PycharmProjects\\DiseasePrediction\\res\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration default=\"true\" type=\"PythonConfigurationType\" factoryName=\"Python\">\r\n      <module name=\"DiseasePrediction\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"true\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"3bceba5c-1534-412c-a912-a524c5b07970\" name=\"Changes\" comment=\"\" />\r\n      <created>1690038431660</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1690038431660</updated>\r\n      <workItem from=\"1690091793345\" duration=\"1402000\" />\r\n      <workItem from=\"1690097267704\" duration=\"3588000\" />\r\n      <workItem from=\"1690110315042\" duration=\"1241000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"First\">\r\n      <created>1690038606065</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690038606065</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Pikcle\">\r\n      <created>1690041485079</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690041485079</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Pikcle\">\r\n      <created>1690041525525</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690041525525</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Pikcle_stroke\">\r\n      <created>1690042216929</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690042216929</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Pikcle_stroke\">\r\n      <created>1690043927950</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690043927950</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Pikcle_stroke\">\r\n      <created>1690044218297</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690044218297</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"First\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690092549440</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690092549440</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"First\">\r\n      <created>1690109213469</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690109213469</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Updated stoke dataset\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690110465164</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690110465164</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Stroke webpage\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690110489903</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690110489903</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"First\">\r\n      <created>1690112644765</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690112644765</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"KNN_pickle\">\r\n      <created>1690112868079</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690112868079</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"stroke_knn_pickle\">\r\n      <created>1690112928425</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690112928425</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Second update\">\r\n      <created>1690112968877</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690112968877</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Third update\">\r\n      <created>1690128242073</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690128242073</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Some Changes\">\r\n      <created>1690129410403</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690129410403</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"implement heart disease\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690131397731</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690131397731</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"implement heart disease\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690131482996</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690131482996</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"Web page buildup\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690191289621</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690191289621</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"added config.toml and some changes in Home.py\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690205462488</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690205462488</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Major Update!!&#10;1. Change in Web page UI (Make it more user friendly)&#10;2. Add Multiselector for all plots&#10;3. Changes in Classifier files&#10;4. Add Algorithms probability\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690229274816</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690229274816</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"CKD_Preprocessed file upload\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690284715712</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690284715712</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"Kidney module added\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690289818269</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690289818269</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"med update\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690291484074</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690291484074</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"Update 3.0\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690294229361</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690294229361</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"Added Kidney.py\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690298893277</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690298893277</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"Kidney_app&#10;np.array({0,1})\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690299615879</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690299615879</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"Add logo in sidebar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690303065920</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690303065920</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"Add Diabetes Model\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690309875149</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690309875149</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00030\" summary=\"Change in multiapp.py&#10;Changes in README.md\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690310227627</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690310227627</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00031\" summary=\"Add terminal runner file\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690314340170</created>\r\n      <option name=\"number\" value=\"00031\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00031\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690314340170</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00032\" summary=\"requirements.txt\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690316691030</created>\r\n      <option name=\"number\" value=\"00032\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00032\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690316691030</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00033\" summary=\"matplot update\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690317012596</created>\r\n      <option name=\"number\" value=\"00033\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00033\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690317012596</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00034\" summary=\"panda\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690317265475</created>\r\n      <option name=\"number\" value=\"00034\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00034\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690317265475</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00035\" summary=\"med image\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690317613436</created>\r\n      <option name=\"number\" value=\"00035\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00035\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690317613436</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00036\" summary=\"med imd\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690317701347</created>\r\n      <option name=\"number\" value=\"00036\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00036\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690317701347</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00037\" summary=\"Resolve Heart Disease Issue\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690386873571</created>\r\n      <option name=\"number\" value=\"00037\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00037\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690386873571</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00038\" summary=\"Lol\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690467809733</created>\r\n      <option name=\"number\" value=\"00038\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00038\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690467809733</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00039\" summary=\"Fix heart file error\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690477364100</created>\r\n      <option name=\"number\" value=\"00039\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00039\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690477364100</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00040\" summary=\"Update res directory\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690644276680</created>\r\n      <option name=\"number\" value=\"00040\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00040\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690644276681</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00041\" summary=\"Update Apps and Classifier directories&#10;Add Kidney_App.py module\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690644398218</created>\r\n      <option name=\"number\" value=\"00041\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00041\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690644398218</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"42\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <option name=\"CLEAR_INITIAL_COMMIT_MESSAGE\" value=\"true\" />\r\n    <MESSAGE value=\"Some Changes\" />\r\n    <MESSAGE value=\"implement heart disease\" />\r\n    <MESSAGE value=\"Web page buildup\" />\r\n    <MESSAGE value=\"added config.toml and some changes in Home.py\" />\r\n    <MESSAGE value=\"Major Update!!&#10;1. Change in Web page UI (Make it more user friendly)&#10;2. Add Multiselector for all plots&#10;3. Changes in Classifier files&#10;4. Add Algorithms probability\" />\r\n    <MESSAGE value=\"CKD_Preprocessed file upload\" />\r\n    <MESSAGE value=\"Kidney module added\" />\r\n    <MESSAGE value=\"med update\" />\r\n    <MESSAGE value=\"Update 3.0\" />\r\n    <MESSAGE value=\"Added Kidney.py\" />\r\n    <MESSAGE value=\"Kidney_app&#10;np.array({0,1})\" />\r\n    <MESSAGE value=\"Add logo in sidebar\" />\r\n    <MESSAGE value=\"Add Diabetes Model\" />\r\n    <MESSAGE value=\"Change in multiapp.py&#10;Changes in README.md\" />\r\n    <MESSAGE value=\"Add terminal runner file\" />\r\n    <MESSAGE value=\"requirements.txt\" />\r\n    <MESSAGE value=\"matplot update\" />\r\n    <MESSAGE value=\"panda\" />\r\n    <MESSAGE value=\"med image\" />\r\n    <MESSAGE value=\"med imd\" />\r\n    <MESSAGE value=\"Resolve Heart Disease Issue\" />\r\n    <MESSAGE value=\"Lol\" />\r\n    <MESSAGE value=\"Fix heart file error\" />\r\n    <MESSAGE value=\"Update res directory\" />\r\n    <MESSAGE value=\"Update Apps and Classifier directories&#10;Add Kidney_App.py module\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Update Apps and Classifier directories&#10;Add Kidney_App.py module\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 82ba8471cf937849bb955a85b7d3a15198f76c1a)
+++ b/.idea/workspace.xml	(date 1690716817596)
@@ -4,46 +4,35 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="3bceba5c-1534-412c-a912-a524c5b07970" name="Changes" comment="Update Apps and Classifier directories&#10;Add Kidney_App.py module">
-      <change afterPath="$PROJECT_DIR$/res/pickle/diabetes_disease_classifier_DT.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/diabetes_disease_classifier_KNN.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/diabetes_disease_classifier_LR.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/diabetes_disease_classifier_NB.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/diabetes_disease_classifier_RF.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/heart_disease_classifier_DT.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/heart_disease_classifier_KNN.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/heart_disease_classifier_LR.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/heart_disease_classifier_NB.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/heart_disease_classifier_RF.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/hypertension_disease_classifier_DT.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/hypertension_disease_classifier_KNN.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/hypertension_disease_classifier_LR.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/hypertension_disease_classifier_NB.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/hypertension_disease_classifier_RF.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/kidney_disease_classifier_DT.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/kidney_disease_classifier_KNN.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/kidney_disease_classifier_LR.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/kidney_disease_classifier_NB.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/kidney_disease_classifier_RF.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/stroke_disease_classifier_DT.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/stroke_disease_classifier_KNN.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/stroke_disease_classifier_LR.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/stroke_disease_classifier_NB.pkl" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/res/pickle/stroke_disease_classifier_RF.pkl" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/DiseasePrediction.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/DiseasePrediction.iml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_08_25_pm__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_08_25_pm__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_08_26_pm__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_08_26_pm__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_09_03_pm__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_09_03_pm__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_10_04_pm__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25-07-2023_10_04_pm__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_26-07-2023_01_55_am__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_26-07-2023_01_55_am__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_04_22_pm__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_04_22_pm__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_05_36_pm__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_05_36_pm__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_05_50_pm__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_05_50_pm__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_06_14_pm__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-07-2023_06_14_pm__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Home.py" beforeDir="false" afterPath="$PROJECT_DIR$/Home.py" afterDir="false" />
+    <list default="true" id="3bceba5c-1534-412c-a912-a524c5b07970" name="Changes" comment="function">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Apps/Breast_Cancer.py" beforeDir="false" afterPath="$PROJECT_DIR$/Apps/Breast_Cancer.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Apps/Heart_Disease.py" beforeDir="false" afterPath="$PROJECT_DIR$/Apps/Heart_Disease.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Apps/Test_Toggule.py" beforeDir="false" afterPath="$PROJECT_DIR$/Apps/Test_Toggule.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Shapash/Shapash_Heart.py" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/pages/Dataset.py" beforeDir="false" afterPath="$PROJECT_DIR$/pages/Dataset.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/res/Dataset.py" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/res/breast-cancer_disease_classifier_RF.pkl" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/test_home.py" beforeDir="false" afterPath="$PROJECT_DIR$/test_home.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/res/main.py" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/res/pickle/breast-cancer_disease_classifier_DT.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/pickle/breast-cancer_disease_classifier_DT.pkl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/res/pickle/breast-cancer_disease_classifier_LR.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/pickle/breast-cancer_disease_classifier_LR.pkl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/res/pickle/breast-cancer_disease_classifier_RF.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/pickle/breast-cancer_disease_classifier_RF.pkl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/res/pickle/diabetes_disease_classifier_DT.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/pickle/diabetes_disease_classifier_DT.pkl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/res/pickle/diabetes_disease_classifier_LR.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/pickle/diabetes_disease_classifier_LR.pkl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/res/pickle/diabetes_disease_classifier_RF.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/pickle/diabetes_disease_classifier_RF.pkl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/res/pickle/heart_disease_classifier_DT.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/pickle/heart_disease_classifier_DT.pkl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/res/pickle/heart_disease_classifier_LR.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/pickle/heart_disease_classifier_LR.pkl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/res/pickle/heart_disease_classifier_RF.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/pickle/heart_disease_classifier_RF.pkl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/res/pickle/hypertension_disease_classifier_DT.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/pickle/hypertension_disease_classifier_DT.pkl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/res/pickle/hypertension_disease_classifier_LR.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/pickle/hypertension_disease_classifier_LR.pkl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/res/pickle/hypertension_disease_classifier_RF.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/pickle/hypertension_disease_classifier_RF.pkl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/res/pickle/kidney_disease_classifier_DT.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/pickle/kidney_disease_classifier_DT.pkl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/res/pickle/kidney_disease_classifier_LR.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/pickle/kidney_disease_classifier_LR.pkl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/res/pickle/kidney_disease_classifier_RF.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/pickle/kidney_disease_classifier_RF.pkl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/res/pickle/stroke_disease_classifier_DT.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/pickle/stroke_disease_classifier_DT.pkl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/res/pickle/stroke_disease_classifier_LR.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/pickle/stroke_disease_classifier_LR.pkl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/res/pickle/stroke_disease_classifier_RF.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/pickle/stroke_disease_classifier_RF.pkl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/test_home.py" beforeDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -58,6 +47,19 @@
     </option>
   </component>
   <component name="Git.Settings">
+    <favorite-branches>
+      <branch-storage>
+        <map>
+          <entry type="REMOTE">
+            <value>
+              <list>
+                <branch-info repo="$PROJECT_DIR$" source="main/master" />
+              </list>
+            </value>
+          </entry>
+        </map>
+      </branch-storage>
+    </favorite-branches>
     <option name="PUSH_AUTO_UPDATE" value="true" />
     <option name="PUSH_TAGS">
       <GitPushTagMode>
@@ -105,11 +107,11 @@
 }</component>
   <component name="RecentsManager">
     <key name="MoveFile.RECENT_KEYS">
-      <recent name="C:\Users\Shubham\PycharmProjects\Hypertension_Stroke_DiseasePrediction\res\dataset" />
-      <recent name="C:\Users\Shubham\PycharmProjects\Hypertension_Stroke_DiseasePrediction\Apps" />
-      <recent name="C:\Users\Shubham\PycharmProjects\Hypertension_Stroke_DiseasePrediction\Classifier_Models" />
-      <recent name="C:\Users\Shubham\PycharmProjects\Hypertension_Stroke_DiseasePrediction\res" />
+      <recent name="C:\Users\deep\PycharmProjects\DiseasePrediction" />
+      <recent name="C:\Users\deep\PycharmProjects\DiseasePrediction\pages" />
+      <recent name="C:\Users\deep\PycharmProjects\DiseasePrediction\Apps" />
       <recent name="C:\Users\deep\PycharmProjects\DiseasePrediction\res" />
+      <recent name="C:\Users\Shubham\PycharmProjects\Hypertension_Stroke_DiseasePrediction\res\dataset" />
     </key>
   </component>
   <component name="RunManager">
@@ -135,6 +137,33 @@
       <option name="INPUT_FILE" value="" />
       <method v="2" />
     </configuration>
+    <configuration name="functions" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
+      <module name="DiseasePrediction" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <envs>
+        <env name="PYTHONUNBUFFERED" value="1" />
+      </envs>
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/res" />
+      <option name="IS_MODULE_SDK" value="true" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
+      <option name="SCRIPT_NAME" value="C:\Users\deep\PycharmProjects\DiseasePrediction\functions.py" />
+      <option name="PARAMETERS" value="" />
+      <option name="SHOW_COMMAND_LINE" value="true" />
+      <option name="EMULATE_TERMINAL" value="false" />
+      <option name="MODULE_MODE" value="false" />
+      <option name="REDIRECT_INPUT" value="false" />
+      <option name="INPUT_FILE" value="" />
+      <method v="2" />
+    </configuration>
+    <recent_temporary>
+      <list>
+        <item itemvalue="Python.functions" />
+      </list>
+    </recent_temporary>
   </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
@@ -463,7 +492,63 @@
       <option name="project" value="LOCAL" />
       <updated>1690644398218</updated>
     </task>
-    <option name="localTasksCounter" value="42" />
+    <task id="LOCAL-00042" summary="Homi update">
+      <option name="closed" value="true" />
+      <created>1690645120846</created>
+      <option name="number" value="00042" />
+      <option name="presentableId" value="LOCAL-00042" />
+      <option name="project" value="LOCAL" />
+      <updated>1690645120846</updated>
+    </task>
+    <task id="LOCAL-00043" summary="Update Kidney_App.py">
+      <option name="closed" value="true" />
+      <created>1690647016911</created>
+      <option name="number" value="00043" />
+      <option name="presentableId" value="LOCAL-00043" />
+      <option name="project" value="LOCAL" />
+      <updated>1690647016911</updated>
+    </task>
+    <task id="LOCAL-00044" summary="Update">
+      <option name="closed" value="true" />
+      <created>1690647631803</created>
+      <option name="number" value="00044" />
+      <option name="presentableId" value="LOCAL-00044" />
+      <option name="project" value="LOCAL" />
+      <updated>1690647631803</updated>
+    </task>
+    <task id="LOCAL-00045" summary="Major update">
+      <option name="closed" value="true" />
+      <created>1690714119168</created>
+      <option name="number" value="00045" />
+      <option name="presentableId" value="LOCAL-00045" />
+      <option name="project" value="LOCAL" />
+      <updated>1690714119168</updated>
+    </task>
+    <task id="LOCAL-00046" summary="Update again">
+      <option name="closed" value="true" />
+      <created>1690714649200</created>
+      <option name="number" value="00046" />
+      <option name="presentableId" value="LOCAL-00046" />
+      <option name="project" value="LOCAL" />
+      <updated>1690714649200</updated>
+    </task>
+    <task id="LOCAL-00047" summary="requirements.txt updato">
+      <option name="closed" value="true" />
+      <created>1690714973797</created>
+      <option name="number" value="00047" />
+      <option name="presentableId" value="LOCAL-00047" />
+      <option name="project" value="LOCAL" />
+      <updated>1690714973797</updated>
+    </task>
+    <task id="LOCAL-00048" summary="Up">
+      <option name="closed" value="true" />
+      <created>1690715433151</created>
+      <option name="number" value="00048" />
+      <option name="presentableId" value="LOCAL-00048" />
+      <option name="project" value="LOCAL" />
+      <updated>1690715433151</updated>
+    </task>
+    <option name="localTasksCounter" value="49" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -483,13 +568,6 @@
   <component name="VcsManagerConfiguration">
     <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
     <option name="CLEAR_INITIAL_COMMIT_MESSAGE" value="true" />
-    <MESSAGE value="Some Changes" />
-    <MESSAGE value="implement heart disease" />
-    <MESSAGE value="Web page buildup" />
-    <MESSAGE value="added config.toml and some changes in Home.py" />
-    <MESSAGE value="Major Update!!&#10;1. Change in Web page UI (Make it more user friendly)&#10;2. Add Multiselector for all plots&#10;3. Changes in Classifier files&#10;4. Add Algorithms probability" />
-    <MESSAGE value="CKD_Preprocessed file upload" />
-    <MESSAGE value="Kidney module added" />
     <MESSAGE value="med update" />
     <MESSAGE value="Update 3.0" />
     <MESSAGE value="Added Kidney.py" />
@@ -508,6 +586,13 @@
     <MESSAGE value="Fix heart file error" />
     <MESSAGE value="Update res directory" />
     <MESSAGE value="Update Apps and Classifier directories&#10;Add Kidney_App.py module" />
-    <option name="LAST_COMMIT_MESSAGE" value="Update Apps and Classifier directories&#10;Add Kidney_App.py module" />
+    <MESSAGE value="Homi update" />
+    <MESSAGE value="Update Kidney_App.py" />
+    <MESSAGE value="Update" />
+    <MESSAGE value="Major update" />
+    <MESSAGE value="Update again" />
+    <MESSAGE value="requirements.txt updato" />
+    <MESSAGE value="Up" />
+    <option name="LAST_COMMIT_MESSAGE" value="Up" />
   </component>
 </project>
\ No newline at end of file
Index: Apps/Test_Toggule.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import streamlit as st\r\nfrom streamlit_toggle import st_toggle_switch\r\ndef app():\r\n        st.write(\"## Toggle Switch\")\r\n        st_toggle_switch(\r\n                label=\"Enable Setting?\",\r\n                key=\"switch_1\",\r\n                default_value=False,\r\n                label_after=False,\r\n                inactive_color=\"#D3D3D3\",  # optional\r\n                active_color=\"#11567f\",  # optional\r\n                track_color=\"#29B5E8\",  # optional\r\n        )
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Apps/Test_Toggule.py b/Apps/Test_Toggule.py
--- a/Apps/Test_Toggule.py	(revision 82ba8471cf937849bb955a85b7d3a15198f76c1a)
+++ b/Apps/Test_Toggule.py	(date 1690716390551)
@@ -1,13 +1,3 @@
 import streamlit as st
 from streamlit_toggle import st_toggle_switch
-def app():
-        st.write("## Toggle Switch")
-        st_toggle_switch(
-                label="Enable Setting?",
-                key="switch_1",
-                default_value=False,
-                label_after=False,
-                inactive_color="#D3D3D3",  # optional
-                active_color="#11567f",  # optional
-                track_color="#29B5E8",  # optional
-        )
\ No newline at end of file
+st = [2,4,5][6,1,0]
Index: pages/Dataset.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import streamlit as st\r\nimport pandas as pd\r\nimport plotly.express as px\r\nfrom res import functions\r\nfrom streamlit_extras.switch_page_button import switch_page\r\n\r\nst.set_page_config(\r\n    layout=\"wide\"\r\n)\r\n\r\n\r\ndef app():\r\n    page_switch = st.button(\"\uD83C\uDFC3\u200DBack\")\r\n    if page_switch:\r\n        switch_page(\"Home\")\r\n    st.header(\"DataAnalyzer\")\r\n\r\n    # st.markdown(\"**A Exploratory Data Analysis Tool**\")\r\n\r\n    st.write('<p style=\"font-size:145%\">You will be able to \uD83D\uDC47</p>', unsafe_allow_html=True)\r\n\r\n    st.write('<p style=\"font-size:100%\">&nbsp 1. See the whole dataset</p>', unsafe_allow_html=True)\r\n    st.write('<p style=\"font-size:100%\">&nbsp 2. Get column names, data types info</p>', unsafe_allow_html=True)\r\n    st.write('<p style=\"font-size:100%\">&nbsp 3. Get the count and percentage of NA values</p>', unsafe_allow_html=True)\r\n    st.write('<p style=\"font-size:100%\">&nbsp 4. Get descriptive analysis </p>', unsafe_allow_html=True)\r\n    st.write('<p style=\"font-size:100%\">&nbsp 5. Check inbalance or distribution of target variable:</p>',\r\n             unsafe_allow_html=True)\r\n    st.write('<p style=\"font-size:100%\">&nbsp 6. See distribution of numerical columns</p>', unsafe_allow_html=True)\r\n    st.write('<p style=\"font-size:100%\">&nbsp 7. See count plot of categorical columns</p>', unsafe_allow_html=True)\r\n    st.write('<p style=\"font-size:100%\">&nbsp 8. Get outlier analysis with box plots</p>', unsafe_allow_html=True)\r\n    st.write('<p style=\"font-size:100%\">&nbsp 9. Obtain info of target value variance with categorical columns</p>',\r\n             unsafe_allow_html=True)\r\n    # st.image('header2.png', use_column_width = True)\r\n\r\n    functions.space()\r\n    st.write('<p style=\"font-size:130%\">Import Dataset</p>', unsafe_allow_html=True)\r\n\r\n    file_format = st.radio('Select file format:', ('csv', 'excel'), key='file_format')\r\n    dataset = st.file_uploader(label='')\r\n\r\n    use_defo = st.selectbox('Use example Dataset', ('Heart', 'kidney'))\r\n    if 'Heart' in use_defo:\r\n        dataset = 'res/dataset/heart.csv'\r\n    if 'kidney' in use_defo:\r\n        dataset = 'res/dataset/kidney.csv'\r\n\r\n    st.sidebar.header('Import Dataset to Use Available Features: \uD83D\uDC49')\r\n\r\n    if dataset:\r\n        if file_format == 'csv' or use_defo:\r\n            df = pd.read_csv(dataset)\r\n        else:\r\n            df = pd.read_excel(dataset)\r\n\r\n        st.subheader('Dataframe:')\r\n        n, m = df.shape\r\n        st.write(f'<p style=\"font-size:130%\">Dataset contains {n} rows and {m} columns.</p>', unsafe_allow_html=True)\r\n        st.dataframe(df)\r\n\r\n        all_vizuals = ['Info', 'NA Info', 'Descriptive Analysis', 'Target Analysis',\r\n                       'Distribution of Numerical Columns', 'Count Plots of Categorical Columns',\r\n                       'Box Plots', 'Outlier Analysis', 'Variance of Target with Categorical Columns']\r\n        functions.sidebar_space(3)\r\n        vizuals = st.sidebar.multiselect(\"Choose which visualizations you want to see \uD83D\uDC47\", all_vizuals)\r\n\r\n        if 'Info' in vizuals:\r\n            st.subheader('Info:')\r\n            c1, c2, c3 = st.columns([1, 2, 1])\r\n            c2.dataframe(functions.df_info(df))\r\n\r\n        if 'NA Info' in vizuals:\r\n            st.subheader('NA Value Information:')\r\n            if df.isnull().sum().sum() == 0:\r\n                st.write('There is not any NA value in your dataset.')\r\n            else:\r\n                c1, c2, c3 = st.columns([0.5, 2, 0.5])\r\n                c2.dataframe(functions.df_isnull(df), width=1500)\r\n                functions.space(2)\r\n\r\n        if 'Descriptive Analysis' in vizuals:\r\n            st.subheader('Descriptive Analysis:')\r\n            st.dataframe(df.describe())\r\n\r\n        if 'Target Analysis' in vizuals:\r\n            st.subheader(\"Select target column:\")\r\n            target_column = st.selectbox(\"\", df.columns, index=len(df.columns) - 1)\r\n\r\n            st.subheader(\"Histogram of target column\")\r\n            fig = px.histogram(df, x=target_column)\r\n            c1, c2, c3 = st.columns([0.5, 2, 0.5])\r\n            c2.plotly_chart(fig)\r\n\r\n        num_columns = df.select_dtypes(exclude='object').columns\r\n        cat_columns = df.select_dtypes(include='object').columns\r\n\r\n        if 'Distribution of Numerical Columns' in vizuals:\r\n\r\n            if len(num_columns) == 0:\r\n                st.write('There is no numerical columns in the data.')\r\n            else:\r\n                selected_num_cols = functions.sidebar_multiselect_container('Choose columns for Distribution plots:',\r\n                                                                            num_columns, 'Distribution')\r\n                st.subheader('Distribution of numerical columns')\r\n                i = 0\r\n                while (i < len(selected_num_cols)):\r\n                    c1, c2 = st.columns(2)\r\n                    for j in [c1, c2]:\r\n\r\n                        if (i >= len(selected_num_cols)):\r\n                            break\r\n\r\n                        fig = px.histogram(df, x=selected_num_cols[i])\r\n                        j.plotly_chart(fig, use_container_width=True)\r\n                        i += 1\r\n\r\n        if 'Count Plots of Categorical Columns' in vizuals:\r\n\r\n            if len(cat_columns) == 0:\r\n                st.write('There is no categorical columns in the data.')\r\n            else:\r\n                selected_cat_cols = functions.sidebar_multiselect_container('Choose columns for Count plots:',\r\n                                                                            cat_columns,\r\n                                                                            'Count')\r\n                st.subheader('Count plots of categorical columns')\r\n                i = 0\r\n                while (i < len(selected_cat_cols)):\r\n                    c1, c2 = st.columns(2)\r\n                    for j in [c1, c2]:\r\n\r\n                        if (i >= len(selected_cat_cols)):\r\n                            break\r\n\r\n                        fig = px.histogram(df, x=selected_cat_cols[i], color_discrete_sequence=['indianred'])\r\n                        j.plotly_chart(fig)\r\n                        i += 1\r\n\r\n        if 'Box Plots' in vizuals:\r\n            if len(num_columns) == 0:\r\n                st.write('There is no numerical columns in the data.')\r\n            else:\r\n                selected_num_cols = functions.sidebar_multiselect_container('Choose columns for Box plots:',\r\n                                                                            num_columns,\r\n                                                                            'Box')\r\n                st.subheader('Box plots')\r\n                i = 0\r\n                while (i < len(selected_num_cols)):\r\n                    c1, c2 = st.columns(2)\r\n                    for j in [c1, c2]:\r\n\r\n                        if (i >= len(selected_num_cols)):\r\n                            break\r\n\r\n                        fig = px.box(df, y=selected_num_cols[i])\r\n                        j.plotly_chart(fig, use_container_width=True)\r\n                        i += 1\r\n\r\n        if 'Outlier Analysis' in vizuals:\r\n            st.subheader('Outlier Analysis')\r\n            c1, c2, c3 = st.columns([1, 2, 1])\r\n            c2.dataframe(functions.number_of_outliers(df))\r\n\r\n        if 'Variance of Target with Categorical Columns' in vizuals:\r\n\r\n            df_1 = df.dropna()\r\n\r\n            high_cardi_columns = []\r\n            normal_cardi_columns = []\r\n\r\n            for i in cat_columns:\r\n                if (df[i].nunique() > df.shape[0] / 10):\r\n                    high_cardi_columns.append(i)\r\n                else:\r\n                    normal_cardi_columns.append(i)\r\n\r\n            if len(normal_cardi_columns) == 0:\r\n                st.write('There is no categorical columns with normal cardinality in the data.')\r\n            else:\r\n\r\n                st.subheader('Variance of target variable with categorical columns')\r\n                model_type = st.radio('Select Problem Type:', ('Regression', 'Classification'), key='model_type')\r\n                selected_cat_cols = functions.sidebar_multiselect_container(\r\n                    'Choose columns for Category Colored plots:',\r\n                    normal_cardi_columns, 'Category')\r\n\r\n                if 'Target Analysis' not in vizuals:\r\n                    target_column = st.selectbox(\"Select target column:\", df.columns, index=len(df.columns) - 1)\r\n\r\n                i = 0\r\n                while (i < len(selected_cat_cols)):\r\n\r\n                    if model_type == 'Regression':\r\n                        fig = px.box(df_1, y=target_column, color=selected_cat_cols[i])\r\n                    else:\r\n                        fig = px.histogram(df_1, color=selected_cat_cols[i], x=target_column)\r\n\r\n                    st.plotly_chart(fig, use_container_width=True)\r\n                    i += 1\r\n\r\n                if high_cardi_columns:\r\n                    if len(high_cardi_columns) == 1:\r\n                        st.subheader(\r\n                            'The following column has high cardinality, that is why its boxplot was not plotted:')\r\n                    else:\r\n                        st.subheader(\r\n                            'The following columns have high cardinality, that is why its boxplot was not plotted:')\r\n                    for i in high_cardi_columns:\r\n                        st.write(i)\r\n\r\n                    st.write('<p style=\"font-size:140%\">Do you want to plot anyway?</p>', unsafe_allow_html=True)\r\n                    answer = st.selectbox(\"\", ('No', 'Yes'))\r\n\r\n                    if answer == 'Yes':\r\n                        for i in high_cardi_columns:\r\n                            fig = px.box(df_1, y=target_column, color=i)\r\n                            st.plotly_chart(fig, use_container_width=True)\r\n\r\n\r\napp()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pages/Dataset.py b/pages/Dataset.py
--- a/pages/Dataset.py	(revision 82ba8471cf937849bb955a85b7d3a15198f76c1a)
+++ b/pages/Dataset.py	(date 1690716503520)
@@ -1,7 +1,7 @@
 import streamlit as st
 import pandas as pd
 import plotly.express as px
-from res import functions
+import functions as fn
 from streamlit_extras.switch_page_button import switch_page
 
 st.set_page_config(
@@ -10,6 +10,7 @@
 
 
 def app():
+    global target_column
     page_switch = st.button("🏃‍Back")
     if page_switch:
         switch_page("Home")
@@ -32,13 +33,13 @@
              unsafe_allow_html=True)
     # st.image('header2.png', use_column_width = True)
 
-    functions.space()
+    fn.space()
     st.write('<p style="font-size:130%">Import Dataset</p>', unsafe_allow_html=True)
 
     file_format = st.radio('Select file format:', ('csv', 'excel'), key='file_format')
     dataset = st.file_uploader(label='')
 
-    use_defo = st.selectbox('Use example Dataset', ('Heart', 'kidney'))
+    use_defo = st.selectbox('Use example Dataset', ('Heart', 'Kidney',))
     if 'Heart' in use_defo:
         dataset = 'res/dataset/heart.csv'
     if 'kidney' in use_defo:
@@ -60,13 +61,13 @@
         all_vizuals = ['Info', 'NA Info', 'Descriptive Analysis', 'Target Analysis',
                        'Distribution of Numerical Columns', 'Count Plots of Categorical Columns',
                        'Box Plots', 'Outlier Analysis', 'Variance of Target with Categorical Columns']
-        functions.sidebar_space(3)
+        fn.sidebar_space(3)
         vizuals = st.sidebar.multiselect("Choose which visualizations you want to see 👇", all_vizuals)
 
         if 'Info' in vizuals:
             st.subheader('Info:')
             c1, c2, c3 = st.columns([1, 2, 1])
-            c2.dataframe(functions.df_info(df))
+            c2.dataframe(fn.df_info(df))
 
         if 'NA Info' in vizuals:
             st.subheader('NA Value Information:')
@@ -74,8 +75,8 @@
                 st.write('There is not any NA value in your dataset.')
             else:
                 c1, c2, c3 = st.columns([0.5, 2, 0.5])
-                c2.dataframe(functions.df_isnull(df), width=1500)
-                functions.space(2)
+                c2.dataframe(fn.df_isnull(df), width=1500)
+                fn.space(2)
 
         if 'Descriptive Analysis' in vizuals:
             st.subheader('Descriptive Analysis:')
@@ -98,7 +99,7 @@
             if len(num_columns) == 0:
                 st.write('There is no numerical columns in the data.')
             else:
-                selected_num_cols = functions.sidebar_multiselect_container('Choose columns for Distribution plots:',
+                selected_num_cols = fn.sidebar_multiselect_container('Choose columns for Distribution plots:',
                                                                             num_columns, 'Distribution')
                 st.subheader('Distribution of numerical columns')
                 i = 0
@@ -118,7 +119,7 @@
             if len(cat_columns) == 0:
                 st.write('There is no categorical columns in the data.')
             else:
-                selected_cat_cols = functions.sidebar_multiselect_container('Choose columns for Count plots:',
+                selected_cat_cols = fn.sidebar_multiselect_container('Choose columns for Count plots:',
                                                                             cat_columns,
                                                                             'Count')
                 st.subheader('Count plots of categorical columns')
@@ -138,7 +139,7 @@
             if len(num_columns) == 0:
                 st.write('There is no numerical columns in the data.')
             else:
-                selected_num_cols = functions.sidebar_multiselect_container('Choose columns for Box plots:',
+                selected_num_cols = fn.sidebar_multiselect_container('Choose columns for Box plots:',
                                                                             num_columns,
                                                                             'Box')
                 st.subheader('Box plots')
@@ -157,7 +158,7 @@
         if 'Outlier Analysis' in vizuals:
             st.subheader('Outlier Analysis')
             c1, c2, c3 = st.columns([1, 2, 1])
-            c2.dataframe(functions.number_of_outliers(df))
+            c2.dataframe(fn.number_of_outliers(df))
 
         if 'Variance of Target with Categorical Columns' in vizuals:
 
@@ -178,7 +179,7 @@
 
                 st.subheader('Variance of target variable with categorical columns')
                 model_type = st.radio('Select Problem Type:', ('Regression', 'Classification'), key='model_type')
-                selected_cat_cols = functions.sidebar_multiselect_container(
+                selected_cat_cols = fn.sidebar_multiselect_container(
                     'Choose columns for Category Colored plots:',
                     normal_cardi_columns, 'Category')
 
@@ -186,7 +187,7 @@
                     target_column = st.selectbox("Select target column:", df.columns, index=len(df.columns) - 1)
 
                 i = 0
-                while (i < len(selected_cat_cols)):
+                while i < len(selected_cat_cols):
 
                     if model_type == 'Regression':
                         fig = px.box(df_1, y=target_column, color=selected_cat_cols[i])
Index: Apps/Breast_Cancer.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import time\r\nimport streamlit as st\r\nimport pandas as pd\r\nimport Classifier_Models.Classifier_model_builder_breast_cancer as cmb\r\nimport pickle\r\nimport numpy as np\r\nfrom streamlit_toggle import st_toggle_switch\r\n\r\ndef app():\r\n    st.title(\"Breast Cancer Detector\")\r\n    st.info(\"This app predicts whether a person have any breast cancer or not\")\r\n    st.markdown(\"\"\"\r\n    **Note** - :red[This Prediction Model is only applicable for Females.]\r\n    \"\"\")\r\n\r\n    st.sidebar.header('User Input Features')\r\n    # st.sidebar.markdown(\"\"\"\r\n    # [Import input CSV file](https://github.com/ChakraDeep8/Heart-Disease-Detector/tree/master/res)\"\"\")\r\n\r\n    uploaded_file = st.sidebar.file_uploader(\"Upload your input CSV file\", type=[\"csv\"])\r\n\r\n    if uploaded_file is not None:\r\n        input_df = pd.read_csv(uploaded_file)\r\n    else:\r\n        def patient_details():\r\n            radius_mean = st.sidebar.slider('Radius of Lobes', 6.98, 28.10, step=0.01)\r\n            texture_mean = st.sidebar.slider('Mean of Surface Texture', 9.71, 39.30, step=0.01)\r\n            perimeter_mean = st.sidebar.slider('Outer Perimeter of Lobes', 43.8, 189.0, step=0.1)\r\n            area_mean = st.sidebar.slider('Mean Area of Lobes', 144, 2510)\r\n            smoothness_mean = st.sidebar.slider('Mean of Smoothness Levels', 0.05, 0.16, step=0.01)\r\n            compactness_mean = st.sidebar.slider('Mean of Compactness', 0.02, 0.35, step=0.01)\r\n            concavity_mean = st.sidebar.slider('Mean of Concavity', 0.00, 0.43, step=0.01)\r\n            concave_points_mean = st.sidebar.slider('Mean of Cocave Points', 0.00, 0.20, step=0.01)\r\n            symmetry_mean = st.sidebar.slider('Mean of Symmetry', 0.11, 0.30, step=0.01)\r\n            fractal_dimension_mean = st.sidebar.slider('Mean of Fractal Dimension', 0.05, 0.10, step=0.01)\r\n            radius_se = st.sidebar.slider('SE of Radius', 0.11, 2.87, step=0.01)\r\n            texture_se = st.sidebar.slider('SE of Texture', 0.36, 4.88, step=0.01)\r\n            perimeter_se = st.sidebar.slider('Perimeter of SE', 0.76, 22.00, step=0.01)\r\n            area_se = st.sidebar.slider('Area of SE', 6.8, 542.0, step=0.1)\r\n            smoothness_se = st.sidebar.slider('SE of Smoothness', 0.00, 0.03, step=0.01)\r\n            compactness_se = st.sidebar.slider('SE of compactness', 0.00, 0.14, step=0.01)\r\n            concavity_se = st.sidebar.slider('SE of concavity', 0.00, 0.40, step=0.01)\r\n            concave_points_se = st.sidebar.slider('SE of concave points', 0.00, 0.05, step=0.01)\r\n            symmetry_se = st.sidebar.slider('SE of symmetry', 0.01, 0.08, step=0.01)\r\n            fractal_dimension_se = st.sidebar.slider('SE of Fractal Dimension', 0.00, 0.03, step=0.01)\r\n            radius_worst = st.sidebar.slider('Worst Radius', 7.93, 36.00, step=0.01)\r\n            texture_worst = st.sidebar.slider('Worst Texture', 12.0, 49.5, step=0.1)\r\n            perimeter_worst = st.sidebar.slider('Worst Permimeter', 50.40, 251.20, step=0.01)\r\n            area_worst = st.sidebar.slider('Worst Area', 185.20, 4250.00, step=0.01)\r\n            smoothness_worst = st.sidebar.slider('Worst Smoothness', 0.07, 0.22, step=0.01)\r\n            compactness_worst = st.sidebar.slider('Worst Compactness', 0.03, 1.06, step=0.01)\r\n            concavity_worst = st.sidebar.slider('Worst Concavity', 0.00, 1.25, step=0.01)\r\n            concave_points_worst= st.sidebar.slider('Worst Concave Points', 0.00, 0.29, step=0.01)\r\n            symmetry_worst = st.sidebar.slider('Worst Symmetry', 0.16, 0.66, step=0.01)\r\n            fractal_dimension_worst = st.sidebar.slider('Worst Fractal Dimension', 0.06, 0.21, step=0.01)\r\n\r\n            data = {'radius_mean': radius_mean,\r\n                    'texture_mean': texture_mean,\r\n                    'perimeter_mean': perimeter_mean,\r\n                    'area_mean': area_mean,\r\n                    'smoothness_mean': smoothness_mean,\r\n                    'compactness_mean': compactness_mean,\r\n                    'concavity_mean': concavity_mean,\r\n                    'concave points_mean': concave_points_mean,\r\n                    'symmetry_mean': symmetry_mean,\r\n                    'fractal_dimension_mean': fractal_dimension_mean,\r\n                    'radius_se': radius_se,\r\n                    'texture_se': texture_se,\r\n                    'perimeter_se': perimeter_se,\r\n                    'area_se': area_se,\r\n                    'smoothness_se': smoothness_se,\r\n                    'compactness_se': compactness_se,\r\n                    'concavity_se': concavity_se,\r\n                    'concave points_se': concave_points_se,\r\n                    'symmetry_se': symmetry_se,\r\n                    'fractal_dimension_se': fractal_dimension_se,\r\n                    'radius_worst': radius_worst,\r\n                    'texture_worst': texture_worst,\r\n                    'perimeter_worst': perimeter_worst,\r\n                    'area_worst': area_worst,\r\n                    'smoothness_worst': smoothness_worst,\r\n                    'compactness_worst': compactness_worst,\r\n                    'concavity_worst': concavity_worst,\r\n                    'concave points_worst': concave_points_worst,\r\n                    'symmetry_worst': symmetry_worst,\r\n                    'fractal_dimension_worst': fractal_dimension_worst, }\r\n\r\n            features = pd.DataFrame(data, index=[0])\r\n            return features\r\n\r\n        input_df = patient_details()\r\n    heart = cmb.X\r\n    df = pd.concat([input_df, heart], axis=0)\r\n    df = df[:1]  # Selects only the first row (the user input data)\r\n    df.loc[:, ~df.columns.duplicated()]\r\n\r\n    if uploaded_file is not None:\r\n        st.write(df)\r\n\r\n    else:\r\n        st.write('Awaiting CSV file to be uploaded. Currently using example input parameters (shown below).')\r\n        df = df.loc[:, ~df.columns.duplicated()]\r\n        st.write(df)\r\n\r\n    # Load the classification models\r\n    load_clf_NB = pickle.load(open('res/pickle/breast-cancer_disease_classifier_NB.pkl', 'rb'))\r\n    load_clf_KNN = pickle.load(open('res/pickle/breast-cancer_disease_classifier_KNN.pkl', 'rb'))\r\n    load_clf_DT = pickle.load(open('res/pickle/breast-cancer_disease_classifier_DT.pkl', 'rb'))\r\n    load_clf_LR = pickle.load(open('res/pickle/breast-cancer_disease_classifier_LR.pkl', 'rb'))\r\n    load_clf_RF = pickle.load(open('res/pickle/breast-cancer_disease_classifier_RF.pkl', 'rb'))\r\n    # Apply models to make predictions\r\n    prediction_NB = load_clf_NB.predict(df)\r\n    prediction_proba_NB = load_clf_NB.predict_proba(df)\r\n    prediction_KNN = load_clf_KNN.predict(df)\r\n    prediction_proba_KNN = load_clf_KNN.predict_proba(df)\r\n    prediction_DT = load_clf_DT.predict(df)\r\n    prediction_proba_DT = load_clf_DT.predict_proba(df)\r\n    prediction_LR = load_clf_LR.predict(df)\r\n    prediction_proba_LR = load_clf_LR.predict_proba(df)\r\n    prediction_RF = load_clf_RF.predict(df)\r\n    prediction_proba_RF = load_clf_RF.predict_proba(df)\r\n\r\n    def NB():\r\n        st.subheader('Naive Bayes Prediction')\r\n        NB_prediction = np.array([0, 1])\r\n        if NB_prediction[prediction_NB] == 1:\r\n            st.write(\"<p style='font-size:20px; color: orange'><b>You have Malignant Tumors.</b></p>\",\r\n                     unsafe_allow_html=True)\r\n            st.markdown(\"\"\"\r\n                        ##### `Malignant tumors are cancerous and have the potential to spread and invade nearby tissues or other parts of the body.`\r\n                        \"\"\")\r\n        else:\r\n            st.write(\"<p style='font-size:20px;color: green'><b>You have Benign Tumors.</b></p>\",\r\n                     unsafe_allow_html=True)\r\n            st.markdown(\"\"\"\r\n                        ##### `Benign tumors are non-cancerous and usually do not invade nearby tissues or spread to other parts of the body.`\r\n                        \"\"\")\r\n        enabled = st_toggle_switch(\"See detailed prediction\")\r\n        if enabled:\r\n            st.subheader('Naive Bayes Prediction Probability')\r\n            st.write(prediction_proba_NB)\r\n            col1, col2 = st.columns(2)\r\n            with col1:\r\n                st.text('Why Classifier Report',\r\n                        help=\"It helps assess the model's ability to correctly identify classes and its overall performance in classifying data.\")\r\n            with col2:\r\n                st.text('How to read',\r\n                        help=\"By looking at the cells where the true and predicted labels intersect, you can see the counts of correct and incorrect predictions. This helps evaluate the model's performance in distinguishing between 'No Disease' and 'Disease' categories.\")\r\n\r\n            cmb.plt_NB()\r\n\r\n    def KNN():\r\n        st.subheader('K-Nearest Neighbour Prediction')\r\n        knn_prediction = np.array([0, 1])\r\n        if knn_prediction[prediction_KNN] == 1:\r\n            st.write(\"<p style='font-size:20px; color: orange'><b>You have Malignant Tumors.</b></p>\",\r\n                     unsafe_allow_html=True)\r\n            st.markdown(\"\"\"\r\n                        ##### `Malignant tumors are cancerous and have the potential to spread and invade nearby tissues or other parts of the body.`\r\n                        \"\"\")\r\n        else:\r\n            st.write(\"<p style='font-size:20px;color: green'><b>You have Benign Tumors.</b></p>\",\r\n                     unsafe_allow_html=True)\r\n            st.markdown(\"\"\"\r\n                        ##### `Benign tumors are non-cancerous and usually do not invade nearby tissues or spread to other parts of the body.`\r\n                        \"\"\")\r\n        enabled = st_toggle_switch(\"See detailed prediction\")\r\n        if enabled:\r\n            st.subheader('KNN Prediction Probability')\r\n            st.write(prediction_proba_KNN)\r\n            col1, col2 = st.columns(2)\r\n            with col1:\r\n                st.text('Why Classifier Report',\r\n                        help=\"It helps assess the model's ability to correctly identify classes and its overall performance in classifying data.\")\r\n            with col2:\r\n                st.text('How to read',\r\n                        help=\"By looking at the cells where the true and predicted labels intersect, you can see the counts of correct and incorrect predictions. This helps evaluate the model's performance in distinguishing between 'No Disease' and 'Disease' categories.\")\r\n\r\n            cmb.plt_KNN()\r\n\r\n    def DT():\r\n        st.subheader('Decision Tree Prediction')\r\n        DT_prediction = np.array([0, 1])\r\n        if DT_prediction[prediction_DT] == 1:\r\n            st.write(\"<p style='font-size:20px; color: orange'><b>You have Malignant Tumors.</b></p>\",\r\n                     unsafe_allow_html=True)\r\n            st.markdown(\"\"\"\r\n                        ##### `Malignant tumors are cancerous and have the potential to spread and invade nearby tissues or other parts of the body.`\r\n                        \"\"\")\r\n        else:\r\n            st.write(\"<p style='font-size:20px;color: green'><b>You have Benign Tumors.</b></p>\",\r\n                     unsafe_allow_html=True)\r\n            st.markdown(\"\"\"\r\n                        ##### `Benign tumors are non-cancerous and usually do not invade nearby tissues or spread to other parts of the body.`\r\n                        \"\"\")\r\n        enabled = st_toggle_switch(\"See detailed prediction\")\r\n        if enabled:\r\n            st.subheader('Decision Tree Prediction Probability')\r\n            st.write(prediction_proba_DT)\r\n            col1, col2 = st.columns(2)\r\n            with col1:\r\n                st.text('Why Classifier Report',\r\n                        help=\"It helps assess the model's ability to correctly identify classes and its overall performance in classifying data.\")\r\n            with col2:\r\n                st.text('How to read',\r\n                        help=\"By looking at the cells where the true and predicted labels intersect, you can see the counts of correct and incorrect predictions. This helps evaluate the model's performance in distinguishing between 'No Disease' and 'Disease' categories.\")\r\n\r\n            cmb.plt_DT()\r\n\r\n    def LR():\r\n        st.subheader('Logistic Regression Prediction')\r\n        LR_prediction = np.array([0, 1])\r\n        if LR_prediction[prediction_LR] == 1:\r\n            st.write(\"<p style='font-size:20px; color: orange'><b>You have Malignant Tumors.</b></p>\",\r\n                     unsafe_allow_html=True)\r\n            st.markdown(\"\"\"\r\n                        ##### `Malignant tumors are cancerous and have the potential to spread and invade nearby tissues or other parts of the body.`\r\n                        \"\"\")\r\n        else:\r\n            st.write(\"<p style='font-size:20px;color: green'><b>You have Benign Tumors.</b></p>\",\r\n                     unsafe_allow_html=True)\r\n            st.markdown(\"\"\"\r\n                        ##### `Benign tumors are non-cancerous and usually do not invade nearby tissues or spread to other parts of the body.`\r\n                        \"\"\")\r\n        enabled = st_toggle_switch(\"See detailed prediction\")\r\n        if enabled:\r\n            st.subheader('Logistic Regression Probability')\r\n            st.write(prediction_proba_LR)\r\n            col1, col2 = st.columns(2)\r\n            with col1:\r\n                st.text('Why Classifier Report',\r\n                        help=\"It helps assess the model's ability to correctly identify classes and its overall performance in classifying data.\")\r\n            with col2:\r\n                st.text('How to read',\r\n                        help=\"By looking at the cells where the true and predicted labels intersect, you can see the counts of correct and incorrect predictions. This helps evaluate the model's performance in distinguishing between 'No Disease' and 'Disease' categories.\")\r\n\r\n            cmb.plt_LR()\r\n\r\n    def RF():\r\n        st.subheader('Random Forest Prediction')\r\n        RF_prediction = np.array([0, 1])\r\n        if RF_prediction[prediction_RF] == 1:\r\n            st.write(\"<p style='font-size:20px; color: orange'><b>You have Malignant Tumors.</b></p>\",\r\n                     unsafe_allow_html=True)\r\n            st.markdown(\"\"\"\r\n                        ##### `Malignant tumors are cancerous and have the potential to spread and invade nearby tissues or other parts of the body.`\r\n                        \"\"\")\r\n        else:\r\n            st.write(\"<p style='font-size:20px;color: green'><b>You have Benign Tumors.</b></p>\",\r\n                     unsafe_allow_html=True)\r\n            st.markdown(\"\"\"\r\n                        ##### `Benign tumors are non-cancerous and usually do not invade nearby tissues or spread to other parts of the body.`\r\n                        \"\"\")\r\n        enabled = st_toggle_switch(\"See detailed prediction\")\r\n        if enabled:\r\n            st.subheader('Random Forest Probability')\r\n            st.write(prediction_proba_RF)\r\n            col1, col2 = st.columns(2)\r\n            with col1:\r\n                st.text('Why Classifier Report',\r\n                        help=\"It helps assess the model's ability to correctly identify classes and its overall performance in classifying data.\")\r\n            with col2:\r\n                st.text('How to read',\r\n                        help=\"By looking at the cells where the true and predicted labels intersect, you can see the counts of correct and incorrect predictions. This helps evaluate the model's performance in distinguishing between 'No Disease' and 'Disease' categories.\")\r\n            cmb.plt_RF()\r\n\r\n    def predict_best_algorithm():\r\n        if cmb.best_model == 'Naive Bayes':\r\n            NB()\r\n\r\n        elif cmb.best_model == 'K-Nearest Neighbors (KNN)':\r\n            KNN()\r\n\r\n        elif cmb.best_model == 'Decision Tree':\r\n            DT()\r\n\r\n        elif cmb.best_model == 'Logistic Regression':\r\n            LR()\r\n\r\n        elif cmb.best_model == 'Random Forest':\r\n            RF()\r\n\r\n        else:\r\n            st.write(\"<p style='font-size:20px;color: green'><b>You have Benign Tumors.</b></p>\",\r\n                    unsafe_allow_html=True)\r\n            st.markdown(\"\"\"\r\n                        ##### `Benign tumors are non-cancerous and usually do not invade nearby tissues or spread to other parts of the body.`\r\n                        \"\"\")\r\n\r\n    st.markdown(\"\uD83D\uDC48 Provide your input data in the sidebar\")\r\n    # Displays the user input features\r\n    with st.expander(\"Prediction Results\", expanded=False):\r\n        # Display the input dataframe\r\n        st.write(\"Your input values are shown below:\")\r\n        st.dataframe(input_df)\r\n        # Call the predict_best_algorithm() function\r\n        st.text('Here, The best algorithm is selected among all algorithm', help='It is based on classifier report')\r\n        predict_best_algorithm()\r\n        #Tips, Diagnosis, Treatment, and Recommendations.\r\n        enabled = st_toggle_switch(\"Disease: Expert Recommendations.\")\r\n        if enabled:\r\n            st.header(\"Expert Insights on Disease: Tips, Diagnosis, Treatment, and Recommendations.\")\r\n            st.subheader(\"Breast Cancer Prevention Tips:\")\r\n            prevention_tips = [\r\n                \"Maintain a healthy weight.\",\r\n                \"Exercise regularly.\",\r\n                \"Limit saturated fat intake.\",\r\n                \"Avoid alcohol consumption.\",\r\n                \"Consider breastfeeding, as it may reduce the risk of breast cancer.\"\r\n            ]\r\n            for tip in prevention_tips:\r\n                st.write(f\"- {tip}\")\r\n\r\n            st.subheader(\"Diagnosis Methods:\")\r\n            diagnosis_methods = [\r\n                \"Mammogram and breast ultrasound.\",\r\n                \"Biopsy (needle aspiration, needle biopsy, vacuum-assisted biopsy).\"\r\n            ]\r\n            for method in diagnosis_methods:\r\n                st.write(f\"- {method}\")\r\n\r\n            st.subheader(\"Treatment Options:\")\r\n            treatment_options = [\r\n                \"Surgery (breast-conserving surgery, mastectomy).\",\r\n                \"Radiotherapy.\",\r\n                \"Chemotherapy.\",\r\n                \"Hormone therapy.\",\r\n                \"Targeted therapy.\"\r\n            ]\r\n            for option in treatment_options:\r\n                st.write(f\"- {option}\")\r\n\r\n            st.subheader(\"Note:\")\r\n            st.write(\"Treatment decisions are based on factors like cancer stage, grade, overall health, and menopause status.\")\r\n            st.write(\"You can discuss your treatment options with your healthcare team and ask questions at any time.\")\r\n\r\n    # Create a multiselect for all the plot options\r\n    selected_plots = st.multiselect(\"You can see all plots here\uD83D\uDC47\",\r\n                                    [\"Naive Bayes\", \"K-Nearest Neighbors\", \"Decision Tree\", \"Logistic Regression\",\r\n                                     \"Random Forest\"], default=[],key=\"ms_B\")\r\n    if \"ms_B\" not in st.session_state:\r\n        st.session_state.selected_plots = []\r\n    # Check the selected plots and call the corresponding plot functions\r\n    if selected_plots:\r\n        col1, col2 = st.columns(2)\r\n        with col1:\r\n            st.text('Why Classifier Report',\r\n                    help=\"It helps assess the model's ability to correctly identify classes and its overall performance in classifying data.\")\r\n        with col2:\r\n            st.text('How to read',\r\n                    help=\"By looking at the cells where the true and predicted labels intersect, you can see the counts of correct and incorrect predictions. This helps evaluate the model's performance in distinguishing between 'No Disease' and 'Disease' categories.\")\r\n\r\n\r\n    placeholder = st.empty()\r\n\r\n    # Check the selected plots and call the corresponding plot functions\r\n    if \"Naive Bayes\" in selected_plots:\r\n        with st.spinner(\"Generating Naive Bayes....\"):\r\n            cmb.plt_NB()\r\n            time.sleep(1)\r\n\r\n    if \"K-Nearest Neighbors\" in selected_plots:\r\n        with st.spinner(\"Generating KNN....\"):\r\n            cmb.plt_KNN()\r\n            time.sleep(1)\r\n\r\n    if \"Decision Tree\" in selected_plots:\r\n        with st.spinner(\"Generating Decision Tree....\"):\r\n            cmb.plt_DT()\r\n            time.sleep(1)\r\n\r\n    if \"Logistic Regression\" in selected_plots:\r\n        with st.spinner(\"Generating Logistic Regression....\"):\r\n            cmb.plt_LR()\r\n            time.sleep(1)\r\n\r\n    if \"Random Forest\" in selected_plots:\r\n        with st.spinner(\"Generating Random Forest....\"):\r\n            cmb.plt_RF()\r\n            time.sleep(1)\r\n\r\n    # Remove the placeholder to display the list options\r\n    placeholder.empty()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Apps/Breast_Cancer.py b/Apps/Breast_Cancer.py
--- a/Apps/Breast_Cancer.py	(revision 82ba8471cf937849bb955a85b7d3a15198f76c1a)
+++ b/Apps/Breast_Cancer.py	(date 1690716390586)
@@ -334,6 +334,7 @@
             st.write("Treatment decisions are based on factors like cancer stage, grade, overall health, and menopause status.")
             st.write("You can discuss your treatment options with your healthcare team and ask questions at any time.")
 
+
     # Create a multiselect for all the plot options
     selected_plots = st.multiselect("You can see all plots here👇",
                                     ["Naive Bayes", "K-Nearest Neighbors", "Decision Tree", "Logistic Regression",
