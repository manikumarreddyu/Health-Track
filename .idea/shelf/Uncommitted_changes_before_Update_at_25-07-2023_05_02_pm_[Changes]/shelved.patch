Index: Apps/Stroke_App.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import time\r\n\r\nimport streamlit as st\r\nimport pandas as pd\r\nfrom Classifier_Models import Classifier_model_builder_stroke as cmb\r\nimport pickle\r\nimport numpy as np\r\n\r\ndef app():\r\n    st.write(\"\"\"\r\n    # Stroke Detector\r\n\r\n    This app predicts whether a person have chances for stroke or not\r\n\r\n    \"\"\")\r\n\r\n    st.sidebar.header('User Input Features')\r\n    # st.sidebar.markdown(\"\"\"\r\n    # [Import input CSV file](https://github.com/ChakraDeep8/Heart-Disease-Detector/tree/master/res)\"\"\")\r\n\r\n    uploaded_file = st.sidebar.file_uploader(\"Upload your input CSV file\", type=[\"csv\"])\r\n\r\n    if uploaded_file is not None:\r\n        input_df = pd.read_csv(uploaded_file)\r\n    else:\r\n        def patient_details():\r\n            sex = st.sidebar.selectbox('Sex', ['Male', 'Female'])\r\n            age = st.sidebar.slider('Age', 0, 103)\r\n            hypertension = st.sidebar.selectbox('Hypertension', ['Yes', 'No'])\r\n            heart_disease = st.sidebar.selectbox('Heart Disease', ['Yes', 'No'])\r\n            marrige_status = st.sidebar.selectbox('Marraige Status', ['Yes', 'No'])\r\n            work_type = st.sidebar.selectbox('Work Type',\r\n                                             ['Never Worked', 'Children', 'Government Job', 'Self-Employed', 'Private'])\r\n            residence_type = st.sidebar.selectbox('Residence Type', ['Urban', 'Rural'])\r\n            glucose_level = st.sidebar.slider('Glucose level', 50, 272)\r\n\r\n            bmi = st.sidebar.slider('BMI', 10, 100)\r\n            smoking_status = st.sidebar.selectbox('Smoking status', ['Yes', 'No'])\r\n\r\n            data = {'age': age,\r\n                    'sex': sex,\r\n                    'hypertension': hypertension,\r\n                    'heart_disease': heart_disease,\r\n                    'ever_married': marrige_status,\r\n                    'work_type': work_type,\r\n                    'Residence_type': residence_type,\r\n                    'avg_glucose_level': glucose_level,\r\n                    'bmi': bmi,\r\n                    'smoking_status': smoking_status,\r\n                    }\r\n\r\n            features = pd.DataFrame(data, index=[0])\r\n            return features\r\n\r\n        input_df = patient_details()\r\n\r\n    stroke_disease_raw = pd.read_csv('res/stroke_data.csv')\r\n    stroke = stroke_disease_raw.drop(columns=['stroke'])\r\n    df = pd.concat([input_df, stroke], axis=0)\r\n\r\n    # Encoding of ordinal features\r\n    encode = ['sex', 'hypertension', 'heart_disease', 'ever_married', 'work_type', 'Residence_type', 'smoking_status']\r\n    for col in encode:\r\n        dummy = pd.get_dummies(df[col], prefix=col)\r\n        df = pd.concat([df, dummy], axis=1)\r\n        del df[col]\r\n    df = df[:1]  # Selects only the first row (the user input data)\r\n    df.loc[:, ~df.columns.duplicated()]\r\n\r\n    if uploaded_file is not None:\r\n        st.write(df)\r\n    else:\r\n        st.write('Awaiting CSV file to be uploaded. Currently using example input parameters (shown below).')\r\n        df = df.loc[:, ~df.columns.duplicated()]\r\n        st.write(df)\r\n\r\n    # Load the classification models\r\n    load_clf_NB = pickle.load(open('res/stroke_disease_classifier_NB.pkl', 'rb'))\r\n    load_clf_KNN = pickle.load(open('res/stroke_disease_classifier_KNN.pkl', 'rb'))\r\n    load_clf_DT = pickle.load(open('res/stroke_disease_classifier_DT.pkl', 'rb'))\r\n    load_clf_LR = pickle.load(open('res/stroke_disease_classifier_LR.pkl', 'rb'))\r\n    load_clf_RF = pickle.load(open('res/stroke_disease_classifier_RF.pkl', 'rb'))\r\n\r\n    # Apply models to make predictions\r\n    prediction_NB = load_clf_NB.predict(df)\r\n    prediction_proba_NB = load_clf_NB.predict_proba(df)\r\n    prediction_KNN = load_clf_KNN.predict(df)\r\n    prediction_proba_KNN = load_clf_KNN.predict_proba(df)\r\n    prediction_DT = load_clf_DT.predict(df)\r\n    prediction_proba_DT = load_clf_DT.predict_proba(df)\r\n    prediction_LR = load_clf_LR.predict(df)\r\n    prediction_proba_LR = load_clf_LR.predict_proba(df)\r\n    prediction_RF = load_clf_RF.predict(df)\r\n    prediction_proba_RF = load_clf_RF.predict_proba(df)\r\n\r\n    def NB():\r\n        st.subheader('Naive Bayes Prediction')\r\n        NB_prediction = np.array([0, 1])\r\n        if NB_prediction[prediction_NB] == 1:\r\n            st.write(\"<p style='font-size:20px;color: orange'><b>You are getting stroke.</b></p>\",\r\n                     unsafe_allow_html=True)\r\n        else:\r\n            st.write(\"<p style='font-size:20px;color: green'><b>You are fine.</b></p>\", unsafe_allow_html=True)\r\n        st.subheader('Naive Bayes Prediction Probability')\r\n        st.write(prediction_proba_NB)\r\n        cmb.plt_NB()\r\n\r\n    def KNN():\r\n        st.subheader('K-Nearest Neighbour Prediction')\r\n        knn_prediction = np.array([0, 1])\r\n        if knn_prediction[prediction_KNN] == 1:\r\n            st.write(\"<p style='font-size:20px;color: orange'><b>You are getting stroke.</b></p>\",\r\n                     unsafe_allow_html=True)\r\n        else:\r\n            st.write(\"<p style='font-size:20px;color: green'><b>You are fine.</b></p>\", unsafe_allow_html=True)\r\n        st.subheader('KNN Prediction Probability')\r\n        st.write(prediction_proba_KNN)\r\n        cmb.plt_KNN()\r\n\r\n    def DT():\r\n        st.subheader('Decision Tree Prediction')\r\n        DT_prediction = np.array([0, 1])\r\n        if DT_prediction[prediction_DT] == 1:\r\n            st.write(\"<p style='font-size:20px; color: orange'><b>You are getting stroke.</b></p>\",\r\n                     unsafe_allow_html=True)\r\n        else:\r\n            st.write(\"<p style='font-size:20px;color: green'><b>You are fine.</b></p>\", unsafe_allow_html=True)\r\n        st.subheader('Decision Tree Prediction Probability')\r\n        st.write(prediction_proba_DT)\r\n        cmb.plt_DT()\r\n\r\n    def LR():\r\n        st.subheader('Logistic Regression Prediction')\r\n        DT_prediction = np.array([0, 1])\r\n        if DT_prediction[prediction_LR] == 1:\r\n            st.write(\"<p style='font-size:20px; color: orange'><b>You are getting stroke.<b></p>\",\r\n                     unsafe_allow_html=True)\r\n        else:\r\n            st.write(\"<p style='font-size:20px;color: green'><b>You are fine.</b></p>\", unsafe_allow_html=True)\r\n        st.subheader('Logistic Regression Probability')\r\n        st.write(prediction_proba_LR)\r\n        cmb.plt_LR()\r\n\r\n    def RF():\r\n        st.subheader('Random Forest Prediction')\r\n        DT_prediction = np.array([0, 1])\r\n        if DT_prediction[prediction_RF] == 1:\r\n            st.write(\"<p style='font-size:20px; color: orange'><b>You are getting stroke.</b></p>\",\r\n                     unsafe_allow_html=True)\r\n        else:\r\n            st.write(\"<p style='font-size:20px;color: green'><b>You are fine.</b></p>\", unsafe_allow_html=True)\r\n        st.subheader('Random Forest Probability')\r\n        st.write(prediction_proba_RF)\r\n        cmb.plt_LR()\r\n\r\n    def predict_best_algorithm():\r\n        if cmb.best_model == 'Naive Bayes':\r\n            st.write(\"<p style='font-size:24px;'>Best Algorithm: Naive Bayes</p>\", unsafe_allow_html=True)\r\n            NB()\r\n\r\n        elif cmb.best_model == 'K-Nearest Neighbors (KNN)':\r\n            st.write(\"<p style='font-size:24px;'>Best Algorithm: K-Nearest Neighbour</p>\", unsafe_allow_html=True)\r\n            KNN()\r\n\r\n        elif cmb.best_model == 'Decision Tree':\r\n            st.write(\"<p style='font-size:24px;'>Best Algorithm: Decision Tree</p>\", unsafe_allow_html=True)\r\n            DT()\r\n\r\n        elif cmb.best_model == 'Logistic Regression':\r\n            st.write(\"<p style='font-size:24px;'>Best Algorithm: Logistic Regression</p>\", unsafe_allow_html=True)\r\n            LR()\r\n\r\n        elif cmb.best_model == 'Random Forest':\r\n            st.write(\"<p style='font-size:24px;'>Best Algorithm: Random Forest</p>\", unsafe_allow_html=True)\r\n            RF()\r\n        else:\r\n            st.write(\"<p style='font-size:20px;color: green'><b>You are fine.</b></p>\", unsafe_allow_html=True)\r\n\r\n    # Displays the user input features\r\n\r\n    with st.expander(\"Prediction Results\"):\r\n        # Display the input dataframe\r\n        st.write(\"Your input values are shown below:\")\r\n        st.dataframe(input_df)\r\n        # Call the predict_best_algorithm() function\r\n        predict_best_algorithm()\r\n\r\n    # Create a multiselect for all the plot options\r\n    selected_plots = st.multiselect(\"Select plots to display\",\r\n                                    [\"Naive Bayes\", \"K-Nearest Neighbors\", \"Decision Tree\", \"Logistic Regression\",\r\n                                     \"Random Forest\"])\r\n\r\n    # Check the selected plots and call the corresponding plot functions\r\n\r\n    placeholder = st.empty()\r\n\r\n    # Check the selected plots and call the corresponding plot functions\r\n    if \"Naive Bayes\" in selected_plots:\r\n        with st.spinner(\"Generating Naive Bayes....\"):\r\n            cmb.plt_NB()\r\n            time.sleep(1)\r\n\r\n    if \"K-Nearest Neighbors\" in selected_plots:\r\n        with st.spinner(\"Generating KNN....\"):\r\n            cmb.plt_KNN()\r\n            time.sleep(1)\r\n\r\n    if \"Decision Tree\" in selected_plots:\r\n        with st.spinner(\"Generating Decision Tree....\"):\r\n            cmb.plt_DT()\r\n            time.sleep(1)\r\n\r\n    if \"Logistic Regression\" in selected_plots:\r\n        with st.spinner(\"Generating Logistic Regression....\"):\r\n            cmb.plt_LR()\r\n            time.sleep(1)\r\n\r\n    if \"Random Forest\" in selected_plots:\r\n        with st.spinner(\"Generating Random Forest....\"):\r\n            cmb.plt_RF()\r\n            time.sleep(1)\r\n\r\n    # Remove the placeholder to display the list options\r\n    placeholder.empty()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Apps/Stroke_App.py b/Apps/Stroke_App.py
--- a/Apps/Stroke_App.py	(revision 22fddc4ebf6ad61088b077a9d2959d3bc205fb4f)
+++ b/Apps/Stroke_App.py	(date 1690230149737)
@@ -125,7 +125,8 @@
                      unsafe_allow_html=True)
         else:
             st.write("<p style='font-size:20px;color: green'><b>You are fine.</b></p>", unsafe_allow_html=True)
-        st.subheader('Decision Tree Prediction Probability')
+        st.subheader('Decision Tree Prediction Probability ')
+        st.write("(0: NO, 1: Yes)")
         st.write(prediction_proba_DT)
         cmb.plt_DT()
 
Index: Classifier_Models/Classifier_model_builder_stroke.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\r\nimport streamlit as st\r\nfrom sklearn.model_selection import train_test_split\r\nfrom sklearn.neighbors import KNeighborsClassifier\r\nfrom sklearn.naive_bayes import GaussianNB\r\nimport pandas as pd\r\nfrom sklearn.tree import DecisionTreeClassifier\r\nimport pickle\r\nfrom sklearn.metrics import confusion_matrix, accuracy_score\r\nimport matplotlib.pyplot as plt\r\nfrom sklearn.linear_model import LogisticRegression\r\nfrom sklearn.ensemble import RandomForestClassifier\r\nfrom sklearn.metrics import classification_report\r\n\r\nurl = \"https://raw.githubusercontent.com/ChakraDeep8/Hypertension_Stroke_DiseasePrediction/master/res/stroke_data.csv\"\r\nstroke = pd.read_csv(url)\r\n\r\n\r\n# Ordinal feature encoding\r\n\r\ndf = stroke.copy()\r\nencode = ['sex', 'hypertension', 'heart_disease', 'ever_married', 'work_type', 'Residence_type', 'smoking_status']\r\n\r\nfor col in encode:\r\n    dummy = pd.get_dummies(df[col], prefix=col)\r\n    df = pd.concat([df, dummy], axis=1)\r\n    del df[col]\r\n    del dummy\r\n\r\n# Separating X and y\r\nX = df.drop('stroke', axis=1)\r\nY = df['stroke']\r\n\r\n# Split the dataset into training and testing sets\r\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)\r\n\r\n\"\"\"________Naive Bayes Algorithm________\"\"\"\r\n# Train the Naive Bayes classifier\r\nnb_classifier = GaussianNB(var_smoothing=1e-9)\r\nnb_classifier.fit(X_train, y_train)\r\n# Predict using the Naive Bayes classifier\r\nnb_predictions = nb_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Naive Bayes classifier\r\nnb_cm = confusion_matrix(y_test, nb_predictions)\r\nnb_accuracy = accuracy_score(y_test, nb_predictions)\r\nnb_classifier_report = classification_report(y_test, nb_predictions)\r\nnb_classifier_report_dict = classification_report(y_test, nb_predictions,output_dict=True)\r\n\r\ndef plt_NB():\r\n\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(nb_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Naive Bayes Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for Naive Bayes classifier\r\n    plt.figure()\r\n    plt.imshow(nb_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - Naive Bayes')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = nb_cm.max() / 2\r\n    for i, j in np.ndindex(nb_cm.shape):\r\n        plt.text(j, i, format(nb_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if nb_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\"\"\"________KNN Algorithm________\"\"\"\r\n# Train the K-Nearest Neighbors classifier\r\nknn_classifier = KNeighborsClassifier()\r\nknn_classifier.fit(X_train, y_train)\r\n# Predict using the K-Nearest Neighbors classifier\r\nknn_predictions = knn_classifier.predict(X_test)\r\nknn_accuracy = accuracy_score(y_test, knn_predictions)\r\nknn_classifier_report = classification_report(y_test, knn_predictions)\r\nknn_classifier_report_dict = classification_report(y_test, knn_predictions, output_dict=True)\r\n\r\n\r\ndef plt_KNN():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(knn_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"K-Nearest Neighbors Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for Naive Bayes classifier\r\n    plt.figure()\r\n    plt.imshow(nb_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - KNN')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = nb_cm.max() / 2\r\n    for i, j in np.ndindex(nb_cm.shape):\r\n        plt.text(j, i, format(nb_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if nb_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\"\"\"________Decision Tree________\"\"\"\r\n# Train the Decision Tree classifier\r\ndt_classifier = DecisionTreeClassifier(max_depth=None)\r\ndt_classifier.fit(X_train, y_train)\r\n# Predict using the Decision Tree classifier\r\ndt_predictions = dt_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Decision Tree classifier\r\ndt_cm = confusion_matrix(y_test, dt_predictions)\r\ndt_accuracy = accuracy_score(y_test, dt_predictions)\r\ndt_classifier_report = classification_report(y_test, dt_predictions)\r\ndt_classifier_report_dict = classification_report(y_test, dt_predictions, output_dict=True)\r\n\r\n\r\ndef plt_DT():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(dt_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Decision Tree Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for Naive Bayes classifier\r\n    plt.figure()\r\n    plt.imshow(nb_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - Decision Tree')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = nb_cm.max() / 2\r\n    for i, j in np.ndindex(nb_cm.shape):\r\n        plt.text(j, i, format(nb_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if nb_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\"\"\"________Logistic Regression Algorithm________\"\"\"\r\n# Train the Logistic Regression classifier\r\nlr_classifier = LogisticRegression(max_iter=1000)\r\nlr_classifier.fit(X_train, y_train)\r\n# Predict using the Logistic Regression classifier\r\nlr_predictions = lr_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Logistic Regression classifier\r\nlr_cm = confusion_matrix(y_test, lr_predictions)\r\nlr_accuracy = accuracy_score(y_test, lr_predictions)\r\nlr_classifier_report = classification_report(y_test, lr_predictions)\r\nlr_classifier_report_dict = classification_report(y_test, lr_predictions, output_dict=True)\r\n\r\n\r\ndef plt_LR():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(lr_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Logistic Regression Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for classifier\r\n    plt.figure()\r\n    plt.imshow(nb_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - Logistic Regression')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = lr_cm.max() / 2\r\n    for i, j in np.ndindex(lr_cm.shape):\r\n        plt.text(j, i, format(lr_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if lr_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\"\"\"________Random Forest Algorithm________\"\"\"\r\n# Train the Random Forest classifier\r\nrf_classifier = RandomForestClassifier(n_estimators=100)\r\nrf_classifier.fit(X_train, y_train)\r\n# Predict using the Random Forest classifier\r\nrf_predictions = rf_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Random Forest classifier\r\nrf_cm = confusion_matrix(y_test, rf_predictions)\r\nrf_accuracy = accuracy_score(y_test, rf_predictions)\r\nrf_classifier_report = classification_report(y_test, rf_predictions)\r\nrf_classifier_report_dict = classification_report(y_test, rf_predictions, output_dict=True)\r\n\r\n\r\ndef plt_RF():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(rf_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Random Forest Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for  classifier\r\n    plt.figure()\r\n    plt.imshow(rf_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - Random Forest')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = rf_cm.max() / 2\r\n    for i, j in np.ndindex(rf_cm.shape):\r\n        plt.text(j, i, format(rf_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if rf_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n# Selecting the best suitable algorithm based on classifier_report\r\nmodels = {\r\n    'Naive Bayes': nb_classifier_report,\r\n    'K-Nearest Neighbors (KNN)': knn_classifier_report,\r\n    'Decision Tree': dt_classifier_report,\r\n    'Logistic Regression': lr_classifier_report,\r\n    'Random Forest': rf_classifier_report\r\n}\r\n\r\nbest_model = max(models, key=models.get)\r\n\r\n# Saving the model\r\npickle.dump(nb_classifier, open('res/stroke_disease_classifier_NB.pkl', 'wb'))\r\npickle.dump(knn_classifier, open('res/stroke_disease_classifier_KNN.pkl', 'wb'))\r\npickle.dump(dt_classifier, open('res/stroke_disease_classifier_DT.pkl', 'wb'))\r\npickle.dump(lr_classifier, open('res/stroke_disease_classifier_LR.pkl', 'wb'))\r\npickle.dump(rf_classifier, open('res/stroke_disease_classifier_RF.pkl', 'wb'))\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classifier_Models/Classifier_model_builder_stroke.py b/Classifier_Models/Classifier_model_builder_stroke.py
--- a/Classifier_Models/Classifier_model_builder_stroke.py	(revision 22fddc4ebf6ad61088b077a9d2959d3bc205fb4f)
+++ b/Classifier_Models/Classifier_model_builder_stroke.py	(date 1690268292950)
@@ -266,7 +266,7 @@
 }
 
 best_model = max(models, key=models.get)
-
+p1 = "https://raw.githubusercontent.com/ChakraDeep8/Hypertension_Stroke_DiseasePrediction/master/res/stroke_disease_classifier_NB.pkl"
 # Saving the model
 pickle.dump(nb_classifier, open('res/stroke_disease_classifier_NB.pkl', 'wb'))
 pickle.dump(knn_classifier, open('res/stroke_disease_classifier_KNN.pkl', 'wb'))
Index: Apps/Heart_Disease.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import time\r\n\r\nimport streamlit as st\r\nimport pandas as pd\r\nfrom Classifier_Models import Classifier_model_builder_heart as cmb\r\nimport pickle\r\nimport numpy as np\r\n\r\ndef app():\r\n\r\n    st.write(\"\"\"\r\n    # Heart Disease Detector\r\n    \r\n    This app predicts whether a person have any heart disease or not\r\n\r\n    \"\"\")\r\n\r\n    st.sidebar.header('User Input Features')\r\n    # st.sidebar.markdown(\"\"\"\r\n    # [Import input CSV file](https://github.com/ChakraDeep8/Heart-Disease-Detector/tree/master/res)\"\"\")\r\n\r\n\r\n    uploaded_file = st.sidebar.file_uploader(\"Upload your input CSV file\", type=[\"csv\"])\r\n\r\n    if uploaded_file is not None:\r\n        input_df = pd.read_csv(uploaded_file)\r\n    else:\r\n        def patient_details():\r\n            sex = st.sidebar.selectbox('Sex', ('M', 'F'))\r\n            ChestPainType = st.sidebar.selectbox('Chest Pain Type', ('TA', 'ASY', 'NAP'))\r\n            RestingECG = st.sidebar.selectbox('Resting Electrocardiogram', ('Normal', 'ST', 'LVH'))\r\n            ExerciseAngina = st.sidebar.selectbox('ExerciseAngina', ('Y', 'N'))\r\n            ST_Slope = st.sidebar.selectbox('ST Slope', ('Up', 'Flat', 'Down'))\r\n            Age = st.sidebar.slider('Age', 28, 77)\r\n            RestingBP = st.sidebar.slider('Resting Blood Pressure', 0, 200)\r\n            Cholesterol = st.sidebar.slider('Cholesterol', 0, 603)\r\n            MaxHR = st.sidebar.slider('Maximum Heart Rate', 60, 202)\r\n            Oldpeak = st.sidebar.slider('Old peak', -2, 6)\r\n            FastingBS = st.sidebar.slider('Fasting Blood Sugar', 0, 1)\r\n\r\n            data = {'Age': Age,\r\n                    'Sex': sex,\r\n                    'ChestPainType': ChestPainType,\r\n                    'RestingBP': RestingBP,\r\n                    'Cholesterol': Cholesterol,\r\n                    'FastingBS': FastingBS,\r\n                    'RestingECG': RestingECG,\r\n                    'MaxHR': MaxHR,\r\n                    'ExerciseAngina': ExerciseAngina,\r\n                    'Oldpeak': Oldpeak,\r\n                    'ST_Slope': ST_Slope, }\r\n\r\n            features = pd.DataFrame(data, index=[0])\r\n            return features\r\n\r\n        input_df = patient_details()\r\n\r\n    heart_disease_raw = pd.read_csv('res/heart.csv')\r\n    heart = heart_disease_raw.drop(columns=['HeartDisease'])\r\n    df = pd.concat([input_df, heart], axis=0)\r\n\r\n    # Encoding of ordinal features\r\n    encode = ['Sex', 'ChestPainType', 'RestingECG', 'ExerciseAngina', 'ST_Slope']\r\n    for col in encode:\r\n        dummy = pd.get_dummies(df[col], prefix=col)\r\n        df = pd.concat([df, dummy], axis=1)\r\n        del df[col]\r\n    df = df[:1]  # Selects only the first row (the user input data)\r\n    df.loc[:, ~df.columns.duplicated()]\r\n\r\n    if uploaded_file is not None:\r\n        st.write(df)\r\n    else:\r\n        st.write('Awaiting CSV file to be uploaded. Currently using example input parameters (shown below).')\r\n        df = df.loc[:, ~df.columns.duplicated()]\r\n        st.write(df)\r\n\r\n    # Load the classification models\r\n    load_clf_NB = pickle.load(open('res/heart_disease_classifier_NB.pkl', 'rb'))\r\n    load_clf_KNN = pickle.load(open('res/heart_disease_classifier_KNN.pkl', 'rb'))\r\n    load_clf_DT = pickle.load(open('res/heart_disease_classifier_DT.pkl', 'rb'))\r\n    load_clf_LR = pickle.load(open('res/heart_disease_classifier_LR.pkl', 'rb'))\r\n    load_clf_RF = pickle.load(open('res/heart_disease_classifier_RF.pkl', 'rb'))\r\n\r\n    # Apply models to make predictions\r\n    prediction_NB = load_clf_NB.predict(df)\r\n    prediction_proba_NB = load_clf_NB.predict_proba(df)\r\n    prediction_KNN = load_clf_KNN.predict(df)\r\n    prediction_proba_KNN = load_clf_KNN.predict_proba(df)\r\n    prediction_DT = load_clf_DT.predict(df)\r\n    prediction_proba_DT = load_clf_DT.predict_proba(df)\r\n    prediction_LR = load_clf_LR.predict(df)\r\n    prediction_proba_LR = load_clf_LR.predict_proba(df)\r\n    prediction_RF = load_clf_RF.predict(df)\r\n    prediction_proba_RF = load_clf_RF.predict_proba(df)\r\n\r\n    def NB():\r\n        st.subheader('Naive Bayes Prediction')\r\n        NB_prediction = np.array([0, 1])\r\n        if NB_prediction[prediction_NB] == 1:\r\n            st.write(\"<p style='font-size:20px;color: orange'><b>You have Heart Disease.</b></p>\",\r\n                     unsafe_allow_html=True)\r\n        else:\r\n            st.write(\"<p style='font-size:20px;color: green'><b>You are fine.</b></p>\", unsafe_allow_html=True)\r\n        st.subheader('Naive Bayes Prediction Probability')\r\n        st.write(prediction_proba_NB)\r\n        cmb.plt_NB()\r\n\r\n    def KNN():\r\n        st.subheader('K-Nearest Neighbour Prediction')\r\n        knn_prediction = np.array([0, 1])\r\n        if knn_prediction[prediction_KNN] == 1:\r\n            st.write(\"<p style='font-size:20px;color: orange'><b>You have Heart Disease.</b></p>\",\r\n                     unsafe_allow_html=True)\r\n        else:\r\n            st.write(\"<p style='font-size:20px;color: green'><b>You are fine.</b></p>\", unsafe_allow_html=True)\r\n        st.subheader('KNN Prediction Probability')\r\n        st.write(prediction_proba_KNN)\r\n        cmb.plt_KNN()\r\n\r\n    def DT():\r\n        st.subheader('Decision Tree Prediction')\r\n        DT_prediction = np.array([0, 1])\r\n        if DT_prediction[prediction_DT] == 1:\r\n            st.write(\"<p style='font-size:20px; color: orange'><b>You have Heart Disease.</b></p>\",\r\n                     unsafe_allow_html=True)\r\n        else:\r\n            st.write(\"<p style='font-size:20px;color: green'><b>You are fine.</b></p>\", unsafe_allow_html=True)\r\n        st.subheader('Decision Tree Prediction Probability')\r\n        st.write(prediction_proba_DT)\r\n        cmb.plt_DT()\r\n\r\n    def LR():\r\n        st.subheader('Logistic Regression Prediction')\r\n        DT_prediction = np.array([0, 1])\r\n        if DT_prediction[prediction_DT] == 1:\r\n            st.write(\"<p style='font-size:20px; color: orange'><b>You have Heart Disease.<b></p>\",\r\n                     unsafe_allow_html=True)\r\n        else:\r\n            st.write(\"<p style='font-size:20px;color: green'><b>You are fine.</b></p>\", unsafe_allow_html=True)\r\n        st.subheader('Logistic Regression Probability')\r\n        st.write(prediction_proba_LR)\r\n        cmb.plt_LR()\r\n\r\n    def RF():\r\n        st.subheader('Random Forest Prediction')\r\n        DT_prediction = np.array([0, 1])\r\n        if DT_prediction[prediction_DT] == 1:\r\n            st.write(\"<p style='font-size:20px; color: orange'><b>You have Heart Disease.</b></p>\",\r\n                     unsafe_allow_html=True)\r\n        else:\r\n            st.write(\"<p style='font-size:20px;color: green'><b>You are fine.</b></p>\", unsafe_allow_html=True)\r\n        st.subheader('Random Forest Probability')\r\n        st.write(prediction_proba_RF)\r\n        cmb.plt_RF()\r\n\r\n    def predict_best_algorithm():\r\n        if cmb.best_model == 'Naive Bayes':\r\n            st.write(\"<p style='font-size:24px;'>Best Algorithm: Naive Bayes</p>\", unsafe_allow_html=True)\r\n            NB()\r\n\r\n        elif cmb.best_model == 'K-Nearest Neighbors (KNN)':\r\n            st.write(\"<p style='font-size:24px;'>Best Algorithm: K-Nearest Neighbour</p>\", unsafe_allow_html=True)\r\n            KNN()\r\n\r\n        elif cmb.best_model == 'Decision Tree':\r\n            st.write(\"<p style='font-size:24px;'>Best Algorithm: Decision Tree</p>\", unsafe_allow_html=True)\r\n            DT()\r\n\r\n        elif cmb.best_model == 'Logistic Regression':\r\n            st.write(\"<p style='font-size:24px;'>Best Algorithm: Logistic Regression</p>\", unsafe_allow_html=True)\r\n            LR()\r\n\r\n        elif cmb.best_model == 'Random Forest':\r\n            st.write(\"<p style='font-size:24px;'>Best Algorithm: Random Forest</p>\", unsafe_allow_html=True)\r\n            RF()\r\n        else:\r\n            st.write(\"<p style='font-size:20px;color: green'><b>You are fine.</b></p>\", unsafe_allow_html=True)\r\n\r\n    # Displays the user input features\r\n    with st.expander(\"Prediction Results\"):\r\n        # Display the input dataframe\r\n        st.write(\"Your input values are shown below:\")\r\n        st.dataframe(input_df)\r\n        # Call the predict_best_algorithm() function\r\n        predict_best_algorithm()\r\n\r\n    # Create a multiselect for all the plot options\r\n    selected_plots = st.multiselect(\"Select plots to display\",\r\n                                    [\"Naive Bayes\", \"K-Nearest Neighbors\", \"Decision Tree\", \"Logistic Regression\",\r\n                                     \"Random Forest\"])\r\n\r\n    # Check the selected plots and call the corresponding plot functions\r\n\r\n    placeholder = st.empty()\r\n\r\n    # Check the selected plots and call the corresponding plot functions\r\n    if \"Naive Bayes\" in selected_plots:\r\n        with st.spinner(\"Generating Naive Bayes....\"):\r\n            cmb.plt_NB()\r\n            time.sleep(1)\r\n\r\n    if \"K-Nearest Neighbors\" in selected_plots:\r\n        with st.spinner(\"Generating KNN....\"):\r\n            cmb.plt_KNN()\r\n            time.sleep(1)\r\n\r\n    if \"Decision Tree\" in selected_plots:\r\n        with st.spinner(\"Generating Decision Tree....\"):\r\n            cmb.plt_DT()\r\n            time.sleep(1)\r\n\r\n    if \"Logistic Regression\" in selected_plots:\r\n        with st.spinner(\"Generating Logistic Regression....\"):\r\n            cmb.plt_LR()\r\n            time.sleep(1)\r\n\r\n    if \"Random Forest\" in selected_plots:\r\n        with st.spinner(\"Generating Random Forest....\"):\r\n            cmb.plt_RF()\r\n            time.sleep(1)\r\n\r\n    # Remove the placeholder to display the list options\r\n    placeholder.empty()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Apps/Heart_Disease.py b/Apps/Heart_Disease.py
--- a/Apps/Heart_Disease.py	(revision 22fddc4ebf6ad61088b077a9d2959d3bc205fb4f)
+++ b/Apps/Heart_Disease.py	(date 1690266813218)
@@ -1,5 +1,4 @@
 import time
-
 import streamlit as st
 import pandas as pd
 from Classifier_Models import Classifier_model_builder_heart as cmb
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"3bceba5c-1534-412c-a912-a524c5b07970\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Apps/Heart_Disease.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Apps/Heart_Disease.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Apps/Hypertension_App.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Apps/Hypertension_App.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Apps/Stroke_App.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Apps/Stroke_App.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Classifier_Models/Classifier_model_builder_heart.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Classifier_Models/Classifier_model_builder_heart.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Classifier_Models/Classifier_model_builder_hypertension.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Classifier_Models/Classifier_model_builder_hypertension.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Classifier_Models/Classifier_model_builder_stroke.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Classifier_Models/Classifier_model_builder_stroke.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Home.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Home.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/res/heart_disease_classifier_DT.pkl\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/res/heart_disease_classifier_DT.pkl\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/res/heart_disease_classifier_RF.pkl\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/res/heart_disease_classifier_RF.pkl\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/res/hypertension_disease_classifier_DT.pkl\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/res/hypertension_disease_classifier_DT.pkl\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/res/hypertension_disease_classifier_RF.pkl\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/res/hypertension_disease_classifier_RF.pkl\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/res/stroke_disease_classifier_DT.pkl\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/res/stroke_disease_classifier_DT.pkl\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/res/stroke_disease_classifier_RF.pkl\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/res/stroke_disease_classifier_RF.pkl\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/test_home.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/test_home.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"PUSH_TAGS\">\r\n      <GitPushTagMode>\r\n        <option name=\"argument\" value=\"--follow-tags\" />\r\n        <option name=\"title\" value=\"Current Branch\" />\r\n      </GitPushTagMode>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2SvsXvopiBfvBLkDHiYmxZWjp9S\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/deep/PycharmProjects/DiseasePrediction&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  },\r\n  &quot;keyToStringList&quot;: {\r\n    &quot;ChangesTree.GroupingKeys&quot;: [\r\n    ]\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\deep\\PycharmProjects\\DiseasePrediction\\images\" />\r\n      <recent name=\"C:\\Users\\deep\\PycharmProjects\\DiseasePrediction\\.streamlit\" />\r\n      <recent name=\"C:\\Users\\deep\\PycharmProjects\\DiseasePrediction\\pages\" />\r\n      <recent name=\"C:\\Users\\deep\\PycharmProjects\\DiseasePrediction\\res\" />\r\n      <recent name=\"C:\\Users\\deep\\PycharmProjects\\DiseasePrediction\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Classifier_model_builder_hypertension\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"DiseasePrediction\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"C:\\Users\\deep\\PycharmProjects\\DiseasePrediction\\Classifier_model_builder_hypertension.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"PythonConfigurationType\" factoryName=\"Python\">\r\n      <module name=\"DiseasePrediction\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"true\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"3bceba5c-1534-412c-a912-a524c5b07970\" name=\"Changes\" comment=\"\" />\r\n      <created>1690038431660</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1690038431660</updated>\r\n      <workItem from=\"1690091793345\" duration=\"1402000\" />\r\n      <workItem from=\"1690097267704\" duration=\"3588000\" />\r\n      <workItem from=\"1690110315042\" duration=\"1241000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"First\">\r\n      <created>1690038606065</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690038606065</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Pikcle\">\r\n      <created>1690041485079</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690041485079</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Pikcle\">\r\n      <created>1690041525525</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690041525525</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Pikcle_stroke\">\r\n      <created>1690042216929</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690042216929</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Pikcle_stroke\">\r\n      <created>1690043927950</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690043927950</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Pikcle_stroke\">\r\n      <created>1690044218297</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690044218297</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"First\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690092549440</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690092549440</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"First\">\r\n      <created>1690109213469</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690109213469</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Updated stoke dataset\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690110465164</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690110465164</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Stroke webpage\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690110489903</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690110489903</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"First\">\r\n      <created>1690112644765</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690112644765</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"KNN_pickle\">\r\n      <created>1690112868079</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690112868079</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"stroke_knn_pickle\">\r\n      <created>1690112928425</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690112928425</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Second update\">\r\n      <created>1690112968877</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690112968877</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Third update\">\r\n      <created>1690128242073</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690128242073</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Some Changes\">\r\n      <created>1690129410403</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690129410403</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"implement heart disease\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690131397731</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690131397731</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"implement heart disease\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690131482996</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690131482996</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"Web page buildup\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690191289621</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690191289621</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"added config.toml and some changes in Home.py\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1690205462488</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1690205462488</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"21\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <option name=\"CLEAR_INITIAL_COMMIT_MESSAGE\" value=\"true\" />\r\n    <MESSAGE value=\"Pikcle\" />\r\n    <MESSAGE value=\"Pikcle_stroke\" />\r\n    <MESSAGE value=\"Updated stoke dataset\" />\r\n    <MESSAGE value=\"Stroke webpage\" />\r\n    <MESSAGE value=\"First\" />\r\n    <MESSAGE value=\"KNN_pickle\" />\r\n    <MESSAGE value=\"stroke_knn_pickle\" />\r\n    <MESSAGE value=\"Second update\" />\r\n    <MESSAGE value=\"Third update\" />\r\n    <MESSAGE value=\"Some Changes\" />\r\n    <MESSAGE value=\"implement heart disease\" />\r\n    <MESSAGE value=\"Web page buildup\" />\r\n    <MESSAGE value=\"added config.toml and some changes in Home.py\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"added config.toml and some changes in Home.py\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 22fddc4ebf6ad61088b077a9d2959d3bc205fb4f)
+++ b/.idea/workspace.xml	(date 1690282084812)
@@ -7,12 +7,9 @@
     <list default="true" id="3bceba5c-1534-412c-a912-a524c5b07970" name="Changes" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Apps/Heart_Disease.py" beforeDir="false" afterPath="$PROJECT_DIR$/Apps/Heart_Disease.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Apps/Hypertension_App.py" beforeDir="false" afterPath="$PROJECT_DIR$/Apps/Hypertension_App.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Apps/Stroke_App.py" beforeDir="false" afterPath="$PROJECT_DIR$/Apps/Stroke_App.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Classifier_Models/Classifier_model_builder_heart.py" beforeDir="false" afterPath="$PROJECT_DIR$/Classifier_Models/Classifier_model_builder_heart.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Classifier_Models/Classifier_model_builder_hypertension.py" beforeDir="false" afterPath="$PROJECT_DIR$/Classifier_Models/Classifier_model_builder_hypertension.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Classifier_Models/Classifier_model_builder_stroke.py" beforeDir="false" afterPath="$PROJECT_DIR$/Classifier_Models/Classifier_model_builder_stroke.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Home.py" beforeDir="false" afterPath="$PROJECT_DIR$/Home.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/res/heart_disease_classifier_DT.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/heart_disease_classifier_DT.pkl" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/res/heart_disease_classifier_RF.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/heart_disease_classifier_RF.pkl" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/res/hypertension_disease_classifier_DT.pkl" beforeDir="false" afterPath="$PROJECT_DIR$/res/hypertension_disease_classifier_DT.pkl" afterDir="false" />
@@ -288,7 +285,15 @@
       <option name="project" value="LOCAL" />
       <updated>1690205462488</updated>
     </task>
-    <option name="localTasksCounter" value="21" />
+    <task id="LOCAL-00021" summary="Major Update!!&#10;1. Change in Web page UI (Make it more user friendly)&#10;2. Add Multiselector for all plots&#10;3. Changes in Classifier files&#10;4. Add Algorithms probability">
+      <option name="closed" value="true" />
+      <created>1690229274816</created>
+      <option name="number" value="00021" />
+      <option name="presentableId" value="LOCAL-00021" />
+      <option name="project" value="LOCAL" />
+      <updated>1690229274816</updated>
+    </task>
+    <option name="localTasksCounter" value="22" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -310,6 +315,7 @@
     <MESSAGE value="implement heart disease" />
     <MESSAGE value="Web page buildup" />
     <MESSAGE value="added config.toml and some changes in Home.py" />
-    <option name="LAST_COMMIT_MESSAGE" value="added config.toml and some changes in Home.py" />
+    <MESSAGE value="Major Update!!&#10;1. Change in Web page UI (Make it more user friendly)&#10;2. Add Multiselector for all plots&#10;3. Changes in Classifier files&#10;4. Add Algorithms probability" />
+    <option name="LAST_COMMIT_MESSAGE" value="Major Update!!&#10;1. Change in Web page UI (Make it more user friendly)&#10;2. Add Multiselector for all plots&#10;3. Changes in Classifier files&#10;4. Add Algorithms probability" />
   </component>
 </project>
\ No newline at end of file
Index: Classifier_Models/Classifier_model_builder_heart.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\r\nimport streamlit as st\r\nfrom sklearn.model_selection import train_test_split\r\nfrom sklearn.neighbors import KNeighborsClassifier\r\nfrom sklearn.naive_bayes import GaussianNB\r\nimport pandas as pd\r\nfrom sklearn.tree import DecisionTreeClassifier\r\nimport pickle\r\nfrom sklearn.metrics import confusion_matrix, accuracy_score\r\nimport matplotlib.pyplot as plt\r\nfrom sklearn.linear_model import LogisticRegression\r\nfrom sklearn.ensemble import RandomForestClassifier\r\nfrom sklearn.metrics import classification_report\r\n\r\nurl = \"https://raw.githubusercontent.com/ChakraDeep8/Hypertension_Stroke_DiseasePrediction/master/res/heart.csv\"\r\nheart = pd.read_csv(url)\r\n\r\n# Ordinal feature encoding\r\ndf = heart.copy()\r\nencode = ['Sex', 'ChestPainType', 'RestingECG', 'ExerciseAngina', 'ST_Slope']\r\n\r\nfor col in encode:\r\n    dummy = pd.get_dummies(df[col], prefix=col)\r\n    df = pd.concat([df, dummy], axis=1)\r\n    del df[col]\r\n    del dummy\r\n\r\n# Separating X and y\r\nX = df.drop('HeartDisease', axis=1)\r\nY = df['HeartDisease']\r\n\r\n# Split the dataset into training and testing sets\r\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)\r\n\r\n\"\"\"________Naive Bayes Algorithm________\"\"\"\r\n# Train the Naive Bayes classifier\r\nnb_classifier = GaussianNB(var_smoothing=1e-9)\r\nnb_classifier.fit(X_train, y_train)\r\n# Predict using the Naive Bayes classifier\r\nnb_predictions = nb_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Naive Bayes classifier\r\nnb_cm = confusion_matrix(y_test, nb_predictions)\r\nnb_accuracy = accuracy_score(y_test, nb_predictions)\r\nnb_classifier_report = classification_report(y_test, nb_predictions)\r\nnb_classifier_report_dict = classification_report(y_test, nb_predictions, output_dict=True)\r\n\r\n\r\ndef plt_NB():\r\n\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(nb_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Naive Bayes Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for Naive Bayes classifier\r\n    plt.figure()\r\n    plt.imshow(nb_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - Naive Bayes')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = nb_cm.max() / 2\r\n    for i, j in np.ndindex(nb_cm.shape):\r\n        plt.text(j, i, format(nb_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if nb_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\"\"\"________KNN Algorithm________\"\"\"\r\n# Train the K-Nearest Neighbors classifier\r\nknn_classifier = KNeighborsClassifier()\r\nknn_classifier.fit(X_train, y_train)\r\n# Predict using the K-Nearest Neighbors classifier\r\nknn_predictions = knn_classifier.predict(X_test)\r\nknn_accuracy = accuracy_score(y_test, knn_predictions)\r\nknn_classifier_report = classification_report(y_test, knn_predictions)\r\nknn_classifier_report_dict = classification_report(y_test, knn_predictions, output_dict=True)\r\n\r\n\r\ndef plt_KNN():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(knn_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"K-Nearest Neighbors Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for Naive Bayes classifier\r\n    plt.figure()\r\n    plt.imshow(nb_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - KNN')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = nb_cm.max() / 2\r\n    for i, j in np.ndindex(nb_cm.shape):\r\n        plt.text(j, i, format(nb_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if nb_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\"\"\"________Decision Tree________\"\"\"\r\n# Train the Decision Tree classifier\r\ndt_classifier = DecisionTreeClassifier(max_depth=None)\r\ndt_classifier.fit(X_train, y_train)\r\n# Predict using the Decision Tree classifier\r\ndt_predictions = dt_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Decision Tree classifier\r\ndt_cm = confusion_matrix(y_test, dt_predictions)\r\ndt_accuracy = accuracy_score(y_test, dt_predictions)\r\ndt_classifier_report = classification_report(y_test, dt_predictions)\r\ndt_classifier_report_dict = classification_report(y_test, dt_predictions, output_dict=True)\r\n\r\n\r\ndef plt_DT():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(dt_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Decision Tree Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for Naive Bayes classifier\r\n    plt.figure()\r\n    plt.imshow(nb_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - Decision Tree')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = nb_cm.max() / 2\r\n    for i, j in np.ndindex(nb_cm.shape):\r\n        plt.text(j, i, format(nb_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if nb_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\"\"\"________Logistic Regression Algorithm________\"\"\"\r\n# Train the Logistic Regression classifier\r\nlr_classifier = LogisticRegression(max_iter=1000)\r\nlr_classifier.fit(X_train, y_train)\r\n# Predict using the Logistic Regression classifier\r\nlr_predictions = lr_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Logistic Regression classifier\r\nlr_cm = confusion_matrix(y_test, lr_predictions)\r\nlr_accuracy = accuracy_score(y_test, lr_predictions)\r\nlr_classifier_report = classification_report(y_test, lr_predictions)\r\nlr_classifier_report_dict = classification_report(y_test, lr_predictions, output_dict=True)\r\n\r\n\r\ndef plt_LR():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(lr_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Logistic Regression Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for classifier\r\n    plt.figure()\r\n    plt.imshow(nb_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - Logistic Regression')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = lr_cm.max() / 2\r\n    for i, j in np.ndindex(lr_cm.shape):\r\n        plt.text(j, i, format(lr_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if lr_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n\"\"\"________Random Forest Algorithm________\"\"\"\r\n# Train the Random Forest classifier\r\nrf_classifier = RandomForestClassifier(n_estimators=100)\r\nrf_classifier.fit(X_train, y_train)\r\n# Predict using the Random Forest classifier\r\nrf_predictions = rf_classifier.predict(X_test)\r\n# Calculate confusion matrix and accuracy for Random Forest classifier\r\nrf_cm = confusion_matrix(y_test, rf_predictions)\r\nrf_accuracy = accuracy_score(y_test, rf_predictions)\r\nrf_classifier_report = classification_report(y_test, rf_predictions)\r\nrf_classifier_report_dict = classification_report(y_test, rf_predictions, output_dict=True)\r\n\r\n\r\ndef plt_RF():\r\n    def classifier_report():\r\n        report_df = pd.DataFrame(rf_classifier_report_dict).transpose()\r\n        # Display the classification report as a table using st.write()\r\n        st.write(\"Random Forest Classifier Report\")\r\n        st.write(report_df)\r\n        st.write()\r\n\r\n    # Plot confusion matrix for  classifier\r\n    plt.figure()\r\n    plt.imshow(rf_cm, interpolation='nearest', cmap=plt.cm.Blues)\r\n    plt.title('Confusion Matrix - Random Forest')\r\n    plt.colorbar()\r\n    plt.xticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.yticks([0, 1], ['No Disease', 'Disease'])\r\n    plt.xlabel('Predicted Label')\r\n    plt.ylabel('True Label')\r\n\r\n    thresh = rf_cm.max() / 2\r\n    for i, j in np.ndindex(rf_cm.shape):\r\n        plt.text(j, i, format(rf_cm[i, j], 'd'), ha='center', va='center',\r\n                 color='white' if rf_cm[i, j] > thresh else 'black')\r\n\r\n    # Display the confusion matrix on Streamlit\r\n    st.set_option('deprecation.showPyplotGlobalUse', False)\r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        classifier_report()\r\n    with col2:\r\n        st.pyplot()\r\n\r\n\r\n# Selecting the best suitable algorithm based on classifier_report\r\nmodels = {\r\n    'Naive Bayes': nb_classifier_report,\r\n    'K-Nearest Neighbors (KNN)': knn_classifier_report,\r\n    'Decision Tree': dt_classifier_report,\r\n    'Logistic Regression': lr_classifier_report,\r\n    'Random Forest': rf_classifier_report\r\n}\r\nbest_model = max(models, key=models.get)\r\nprint(type(nb_classifier_report))\r\n\r\n# Saving the model\r\npickle.dump(nb_classifier, open('res/heart_disease_classifier_NB.pkl', 'wb'))\r\npickle.dump(knn_classifier, open('res/heart_disease_classifier_KNN.pkl', 'wb'))\r\npickle.dump(dt_classifier, open('res/heart_disease_classifier_DT.pkl', 'wb'))\r\npickle.dump(lr_classifier, open('res/heart_disease_classifier_LR.pkl', 'wb'))\r\npickle.dump(rf_classifier, open('res/heart_disease_classifier_RF.pkl', 'wb'))\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classifier_Models/Classifier_model_builder_heart.py b/Classifier_Models/Classifier_model_builder_heart.py
--- a/Classifier_Models/Classifier_model_builder_heart.py	(revision 22fddc4ebf6ad61088b077a9d2959d3bc205fb4f)
+++ b/Classifier_Models/Classifier_model_builder_heart.py	(date 1690268941167)
@@ -265,7 +265,6 @@
     'Random Forest': rf_classifier_report
 }
 best_model = max(models, key=models.get)
-print(type(nb_classifier_report))
 
 # Saving the model
 pickle.dump(nb_classifier, open('res/heart_disease_classifier_NB.pkl', 'wb'))
Index: test_home.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import streamlit as st\r\n\r\nst.set_page_config(\r\n    page_title=\"Heart Disease Detector\",\r\n    page_icon=\"\uD83D\uDC97\",\r\n\r\n)\r\n\r\nst.write(\r\n    #Welcome to the Diseases Prediction Model\r\n)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test_home.py b/test_home.py
--- a/test_home.py	(revision 22fddc4ebf6ad61088b077a9d2959d3bc205fb4f)
+++ b/test_home.py	(date 1690229900854)
@@ -1,11 +1,242 @@
+import pickle
+import time
+
+import numpy as np
+import pandas as pd
 import streamlit as st
 
-st.set_page_config(
-    page_title="Heart Disease Detector",
-    page_icon="💗",
+from Classifier_Models import Classifier_model_builder_hypertension as cmb
+
+
+st.write("""
+    # Hypertension Blood Pressure Detector
+
+    This app predicts whether a person have any hypertension blood pressure or not
+
+    """)
+
+st.sidebar.header('User Input Features')
+# st.sidebar.markdown("""
+# [Import input CSV file](https://github.com/ChakraDeep8/Heart-Disease-Detector/tree/master/res)""")
+
+uploaded_file = st.sidebar.file_uploader("Upload your input CSV file", type=["csv"])
+
+if uploaded_file is not None:
+    input_df = pd.read_csv(uploaded_file)
+else:
+    def patient_details():
+        age = st.sidebar.slider('Age', 0, 98)
+        sex = st.sidebar.selectbox('Sex', ['Male', 'Female'])
+        chest_pain_type = st.sidebar.selectbox('Chest Pain Type',
+                                               ['Asymptomatic', 'Typical Angina', 'Atypical Angina', 'Non-anginal'])
+        resting_bp = st.sidebar.slider('Resting Blood Pressure', 94, 200)
+        serum_cholesterol = st.sidebar.slider('Serum Cholesterol', 126, 564)
+        fasting_bs = st.sidebar.selectbox('Fasting Blood Sugar',
+                                          ['Yes', 'No'])  # if the patient's fasting blood sugar > 120 mg/dl
+        resting_ecg = st.sidebar.selectbox('Resting ECG',
+                                           ['Normal', 'ST-T Wave Abnormality', 'Left Ventricular Hypertrophy'])
+        max_hr = st.sidebar.slider('Max Heart Rate', 71, 202)
+        exercise_angina = st.sidebar.selectbox('Exercise-Induced Angina', ['Yes', 'No'])
+        oldpeak = st.sidebar.slider('ST Depression Induced by Exercise Relative to Rest', 0.0, 6.2)
+        st_slope = st.sidebar.selectbox('ST Slope', ['Upsloping', 'Flat', 'Downsloping'])
+        major_vessels = st.sidebar.slider('Number of Major Vessels Colored by Fluoroscopy', 0, 4)
+        thalassemia = st.sidebar.slider('Thalassemia', 0, 3)
+
+        data = {'age': age,
+                'sex': sex,
+                'cp': chest_pain_type,
+                'trestbps': resting_bp,
+                'chol': serum_cholesterol,
+                'fbs': fasting_bs,
+                'restecg': resting_ecg,
+                'thalach': max_hr,
+                'exang': exercise_angina,
+                'oldpeak': oldpeak,
+                'slope': st_slope,
+                'ca': major_vessels,
+                'thal': thalassemia, }
+
+        features = pd.DataFrame(data, index=[0])
+        return features
+
+
+    input_df = patient_details()
+
+hypertension_disease_raw = pd.read_csv('res/hypertension_data.csv')
+hypertension = hypertension_disease_raw.drop(columns=['target'])
+df = pd.concat([input_df, hypertension], axis=0)
+
+# Encoding of ordinal features
+encode = ['sex', 'cp', 'fbs', 'restecg', 'exang', 'slope']
+for col in encode:
+    dummy = pd.get_dummies(df[col], prefix=col)
+    df = pd.concat([df, dummy], axis=1)
+    del df[col]
+df = df[:1]  # Selects only the first row (the user input data)
+df.loc[:, ~df.columns.duplicated()]
+
+if uploaded_file is not None:
+    st.write(df)
+else:
+    st.write('Awaiting CSV file to be uploaded. Currently using example input parameters (shown below).')
+    df = df.loc[:, ~df.columns.duplicated()]
+    st.write(df)
+
+# Load the classification models
+load_clf_NB = pickle.load(open('res/hypertension_disease_classifier_NB.pkl', 'rb'))
+load_clf_KNN = pickle.load(open('res/hypertension_disease_classifier_KNN.pkl', 'rb'))
+load_clf_DT = pickle.load(open('res/hypertension_disease_classifier_DT.pkl', 'rb'))
+load_clf_LR = pickle.load(open('res/hypertension_disease_classifier_LR.pkl', 'rb'))
+load_clf_RF = pickle.load(open('res/hypertension_disease_classifier_RF.pkl', 'rb'))
+
+# Apply models to make predictions
+prediction_NB = load_clf_NB.predict(df)
+prediction_proba_NB = load_clf_NB.predict_proba(df)
+prediction_KNN = load_clf_KNN.predict(df)
+prediction_proba_KNN = load_clf_KNN.predict_proba(df)
+prediction_DT = load_clf_DT.predict(df)
+prediction_proba_DT = load_clf_DT.predict_proba(df)
+prediction_LR = load_clf_LR.predict(df)
+prediction_proba_LR = load_clf_LR.predict_proba(df)
+prediction_RF = load_clf_RF.predict(df)
+prediction_proba_RF = load_clf_RF.predict_proba(df)
+
+
+def NB():
+    st.subheader('Naive Bayes Prediction')
+    NB_prediction = np.array([0, 1])
+    if NB_prediction[prediction_NB] == 1:
+        st.write("<p style='font-size:20px;color: orange'></p>", unsafe_allow_html=True)
+    else:
+        st.write("<p style='font-size:20px;color: green'><b>You are fine.</b></p>", unsafe_allow_html=True)
+    st.subheader('Naive Bayes Prediction Probability')
+    st.write(prediction_proba_NB)
+    cmb.plt_NB()
+
+
+
+def KNN():
+    st.subheader('K-Nearest Neighbour Prediction')
+    knn_prediction = {1: 'Yes', 0: 'NO'}
+    if knn_prediction[prediction_KNN] == 1:
+        st.write("<p style='font-size:20px;color: orange'><b>Heart Disease Detected.</b></p>",
+                 unsafe_allow_html=True)
+    else:
+        st.write("<p style='font-size:20px;color: green'><b>You are fine.</b></p>", unsafe_allow_html=True)
+    st.subheader('KNN Prediction Probability')
+    st.write(prediction_proba_KNN)
+    cmb.plt_KNN()
+
+
+def DT():
+    st.subheader('Decision Tree Prediction')
+    DT_prediction = np.array([0, 1])
+    if DT_prediction[prediction_DT] == 1:
+        st.write("<p style='font-size:20px; color: orange'><b>Heart Disease Detected.</b></p>",
+                 unsafe_allow_html=True)
+    else:
+        st.write("<p style='font-size:20px;color: green'><b>You are fine.</b></p>", unsafe_allow_html=True)
+    st.subheader('Decision Tree Prediction Probability')
+    st.write(prediction_proba_DT)
+    cmb.plt_DT()
+
+
+def LR():
+    st.subheader('Logistic Regression Prediction')
+    DT_prediction = np.array([0, 1])
+    if DT_prediction[prediction_DT] == 1:
+        st.write("<p style='font-size:20px; color: orange'><b>You have hypertension.</b></p>",
+                 unsafe_allow_html=True)
+    else:
+        st.write("<p style='font-size:20px;color: green'><b>You are fine.</b></p>", unsafe_allow_html=True)
+    st.subheader('Logistic Regression Probability')
+    st.write(prediction_proba_LR)
+    cmb.plt_LR()
+
+
+def RF():
+    st.subheader('Random Forest Prediction')
+    DT_prediction = np.array([0, 1])
+    if DT_prediction[prediction_DT] == 1:
+        st.write("<p style='font-size:20px; color: orange'><b>You have hypertension.</b></p>",
+                 unsafe_allow_html=True)
+    else:
+        st.write("<p style='font-size:20px;color: green'><b>You are fine.</b></p>", unsafe_allow_html=True)
+    st.subheader('Random Forest Probability')
+    st.write(prediction_proba_RF)
+    cmb.plt_LR()
+
+
+def predict_best_algorithm():
+    if cmb.best_model == 'Naive Bayes':
+        st.write("<p style='font-size:24px;'>Best Algorithm: Naive Bayes</p>", unsafe_allow_html=True)
+        NB()
+
+    elif cmb.best_model == 'K-Nearest Neighbors (KNN)':
+        st.write("<p style='font-size:24px;'>Best Algorithm: K-Nearest Neighbour</p>", unsafe_allow_html=True)
+        KNN()
+
+    elif cmb.best_model == 'Decision Tree':
+        st.write("<p style='font-size:24px;'>Best Algorithm: Decision Tree</p>", unsafe_allow_html=True)
+        DT()
+
+    elif cmb.best_model == 'Logistic Regression':
+        st.write("<p style='font-size:24px;'>Best Algorithm: Logistic Regression</p>", unsafe_allow_html=True)
+        LR()
+
+    elif cmb.best_model == 'Random Forest':
+        st.write("<p style='font-size:24px;'>Best Algorithm: Random Forest</p>", unsafe_allow_html=True)
+        RF()
+    else:
+        st.write("<p style='font-size:20px;color: green'><b>You are fine.</b></p>", unsafe_allow_html=True)
 
-)
 
-st.write(
-    #Welcome to the Diseases Prediction Model
-)
\ No newline at end of file
+# Displays the user input features
+with st.expander("Prediction Results"):
+    # Display the input dataframe
+    st.write("Your input values are shown below:")
+    st.dataframe(input_df)
+    # Call the predict_best_algorithm() function
+    predict_best_algorithm()
+
+# Create a multiselect for all the plot options
+selected_plots = st.multiselect("Select plots to display",
+                                ["Naive Bayes", "K-Nearest Neighbors", "Decision Tree", "Logistic Regression",
+                                 "Random Forest"])
+
+# Check the selected plots and call the corresponding plot functions
+
+placeholder = st.empty()
+
+# Check the selected plots and call the corresponding plot functions
+if "Naive Bayes" in selected_plots:
+    with st.spinner("Generating Naive Bayes...."):
+        cmb.plt_NB()
+        time.sleep(1)
+
+if "K-Nearest Neighbors" in selected_plots:
+    with st.spinner("Generating KNN...."):
+        cmb.plt_KNN()
+        time.sleep(1)
+
+if "Decision Tree" in selected_plots:
+    with st.spinner("Generating Decision Tree...."):
+        cmb.plt_DT()
+        time.sleep(1)
+
+if "Logistic Regression" in selected_plots:
+    with st.spinner("Generating Logistic Regression...."):
+        cmb.plt_LR()
+        time.sleep(1)
+
+if "Random Forest" in selected_plots:
+    with st.spinner("Generating Random Forest...."):
+        cmb.plt_RF()
+        time.sleep(1)
+
+# Remove the placeholder to display the list options
+placeholder.empty()
+
+
+
+
